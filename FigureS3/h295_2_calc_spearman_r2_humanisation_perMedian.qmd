---
title: "h295_2_calc_spearman_r2_humanisation_perMedian"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r results='hide', message=FALSE}

#' # INITIIEREN ####

set.seed(192)
.libPaths()


library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(patchwork)
library(pander)
require(ggrepel)

require(dplyr)

set.seed(192)

knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# AIM
check  R2 score

# Dataimport

```{r results='hide'}
todo = data.table(fn = dir(here("python/results/07_humanisationR2/"),recursive = T, full.names = T,  pattern = "ma\\.csv$|pr\\.csv$"))
todo = todo[grepl("_archive", fn)==F]

todo[, species := ifelse(grepl("/ma/", fn), "ma", "pr")]
todo[,.N,species]
todo[, num := .I]

todo[, type := ifelse(grepl("meta", fn), "meta", "expression")]
todo[, .N, type]
todo[, celltype := str_replace_all(fn %>% str_split(pattern = "/") %>% unlist() %>% last(), "B05_meta_|B05_gene_expression_|_ma\\.csv$|_pr\\.csv$", ""), num]

todo2 = dcast.data.table(todo, species +celltype~ type, value.var = "fn")
todo2[, id:= paste(species, celltype)]

require(confintr)
erglist = lapply(todo2$id %>% unique(), function(myyid){
  # myyid=todo2$id[1]
  message("working on ", myyid)
  mytodo_gx =todo2[id ==myyid , expression]
  mydata = fread(mytodo_gx)
  mydatam = melt(mydata, id.vars = "rn")
  mydatam
  
  mytodo_meta =todo2[id ==myyid , meta]
  mymeta = fread(mytodo_meta)
  mymeta[,.N, dataset]
  

  
  
  mydat = merge(mymeta, mydatam, by = "rn", all.y=T, sort = F)

  mydat2 = mydat[, .(medianvalue = median(value)), .(species, celltype, dataset, variable)]
  qlist1 = venn2(mydat2[dataset=="human", variable], mydat2[dataset=="humanized hamster", variable], mytitle = myyid)
  
  mydat2[, dataset2 := str_replace_all(dataset, "MA$|PR$", "")]
  mydat2[, comparison := ifelse('ma' %in% species, "ma", "pr")]
  
  mydat3 = dcast.data.table(mydat2,  comparison+celltype + variable  ~ dataset2, value.var = "medianvalue" )
  mydat3
  
  p_num__hum_humanized = ggplot(mydat3, aes(human,  `humanized hamster`)) + geom_point() + geom_smooth()
  
  mydat2[, rangnum := rank(medianvalue, na.last = T), .(dataset2, celltype)]
  mydat4 = dcast.data.table(mydat2, comparison + celltype + variable  ~ dataset2, value.var = "rangnum" )
  mydat4
  p_rank__hum_humanized = ggplot(mydat4, aes(human,  `humanized hamster`)) + geom_point() + geom_smooth() + ggtitle(todo2[id ==myyid, paste(species," // ", celltype)])
  
  p_num__hamster_humanized = ggplot(mydat3, aes(hamster,  `humanized hamster`)) + geom_point() + geom_smooth()
  p_rank__hamster_humanized = ggplot(mydat4, aes(hamster,  `humanized hamster`)) + geom_point() + geom_smooth() + ggtitle(todo2[id ==myyid, paste(species," // ", celltype)])
  
  
  stats_pearson__hum_humanized = mydat3[,cor.test(human, `humanized hamster`)]
  stats_spearman__hum_humanized = mydat3[,cor.test(human, `humanized hamster`,  method = c( "spearman"))]
  
  stats_pearson__hamster_humanized = mydat3[,cor.test(hamster, `humanized hamster`)]
  stats_spearman__hamster_humanized = mydat3[,cor.test(hamster, `humanized hamster`,  method = c( "spearman"))]
  
    stats_pearson__human_hamster = mydat3[,cor.test(human, hamster )]
  stats_spearman__human_hamster = mydat3[,cor.test(human, hamster,  method = c( "spearman"))]
  
  resi = c()
  resi$data_num = mydat3
  resi$data_rank = mydat4
  resi$p_num__hum_humanized = p_num__hum_humanized
  resi$p_rank__hum_humanized = p_rank__hum_humanized
  resi$p_num__hamster_humanized = p_num__hamster_humanized
  resi$p_rank__hamster_humanized = p_rank__hamster_humanized
  
  resi$stats_pearson__hum_humanized = stats_pearson__hum_humanized
  resi$stats_spearman__hum_humanized = stats_spearman__hum_humanized
  resi$stats_pearson__hamster_humanized = stats_pearson__hamster_humanized
  resi$stats_spearman__hamster_humanized = stats_spearman__hamster_humanized
  
  resi$ci95_pearson_hum_humanized = mydat3[,ci_cor(human, `humanized hamster`)$interval  %>% signif(.,4) %>% paste(., collapse = "-")]
  # resi$ci95_spearman = mydat3[,ci_cor(human, `humanized hamster`, method = "spearman", type = "bootstrap", R = 999)$interval  %>% signif(.,4) %>% paste(., collapse = "-")]
  
  
  
  
  resi$compactrow = data.table(species = todo2[id ==myyid, species],
                               celltype = todo2[id ==myyid, celltype],
                               r_pearson_hum_humanized =  stats_pearson__hum_humanized$estimate,
                               r_spearman_hum_humanized =  stats_spearman__hum_humanized$estimate,
                               p_pearson_hum_humanized =  stats_pearson__hum_humanized$p.value,
                               p_spearman_hum_humanized =  stats_spearman__hum_humanized$p.value,
                               
                               r_pearson_hamster_humanized =  stats_pearson__hamster_humanized$estimate, 
                               r_spearman_hamster_humanized =  stats_spearman__hamster_humanized$estimate,
                               p_pearson_hamster_humanized =  stats_pearson__hamster_humanized$p.value,
                               p_spearman_hamster_humanized =  stats_spearman__hamster_humanized$p.value,
                               
                                   r_pearson_human_hamster =  stats_pearson__human_hamster$estimate, 
                               r_spearman_human_hamster =  stats_spearman__human_hamster$estimate,
                               p_pearson_human_hamster =  stats_pearson__human_hamster$p.value,
                               p_spearman_human_hamster =  stats_spearman__human_hamster$p.value
                               
  )
  resi
  
})

ergtab = lapply(erglist, function(mylist) mylist$compactrow) %>% rbindlist()


ggplot(ergtab, aes(r_pearson_hum_humanized , r_spearman_hum_humanized, col = celltype, pch = species, label = celltype)) + geom_point(size = 4, alpha = 0.5) + geom_text_repel() + geom_abline(slope = 1, intercept = 0, lty = 2) + xlim(c(0,1))+ ylim(c(0,1)) + facet_grid(.~species)

ggplot(ergtab, aes(r_pearson_hamster_humanized , r_spearman_hamster_humanized, col = celltype, pch = species, label = celltype)) + geom_point(size = 4, alpha = 0.5) + geom_text_repel() + geom_abline(slope = 1, intercept = 0, lty = 2) + xlim(c(0,1))+ ylim(c(0,1)) + facet_grid(.~species)
```

# supp plot
```{r}
ergtabm_spearman = melt(ergtab, id.vars = c("species", "celltype"), measure.vars =  c('r_spearman_human_hamster' , 'r_spearman_hum_humanized'))





ergtabm_spearman[, species2 := ifelse(species == "ma", "M. auratus", 'P. roborovskii')]
NogpaletteReihe <-  c("#CB769E", "#DE639A", "#A85C85", "#0081AF", "#4F6D7A", "#7C6A0A", "#368F8B", "#246A73", "#5CC1BC", "#62C370", "#F7C548", "#F97E44", "#FB3640", "#B7245C", "#0D3B66", "#3E2F5B", "#B2675E", "#644536")



p_spearman = ggplot(ergtabm_spearman, aes(celltype %>% str_replace_all("_", " "), value^2, alpha = variable, fill = celltype)) +
  theme_minimal(base_size = 16) + 
  labs(alpha = "")+
  geom_col(position = "dodge") + 
  facet_grid(~species2) + 
  # scale_alpha_manual(values = c(1, 0.4)) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1),
        legend.position = "top")+ 
  scale_y_continuous(breaks = pretty_breaks(8))+
  scale_fill_manual(values = NogpaletteReihe) +
  guides(fill = "none") + scale_alpha_manual(values  = c(0.5, 1), labels = c(bquote(R[before~humanization]^2), bquote(R[humanized]^2))) + ylab("Correlation gene expresion hamster vs. human") + xlab("")

p_spearman 

fwrite(ergtabm_spearman, file = here("R/results/h295_2_ergtabm_spearman.csv"))

jpeg(here("R/results/h295_2_p_spearman_supplfig.jpeg"), width = 10, height = 8, units = "in", res = 300)
p_spearman
dev.off()

```

# export for Figure 2
```{r}
erglist[[1]]
data_scatter_medianvalue = lapply(erglist, function(mylist) mylist$data_num) %>% rbindlist()
data_scatter_medianvalue$datatype = "value"

data_scatter_medianrank = lapply(erglist, function(mylist) mylist$data_rank) %>% rbindlist()
data_scatter_medianrank$datatype = "rank"


data_scatter = rbind(data_scatter_medianvalue, data_scatter_medianrank)
showNA(data_scatter, showAllNoNA = F)
data_scatter
setnames(data_scatter, "humanized hamster", "humanized_hamster")
fwrite(data_scatter, file = here("R/results/h295_2_data_scatter.csv"))

```
```{r}
finalizeSkript()
```

R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

locale:
[1] LC_COLLATE=German_Germany.utf8  LC_CTYPE=German_Germany.utf8   
[3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.utf8    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] confintr_1.0.2          dplyr_1.1.3.9000        ggrepel_0.9.3          
 [4] pander_0.6.5            patchwork_1.1.2         ggplot2_3.4.3          
 [7] here_1.0.1              SeuratWrappers_0.3.19   Seurat_4.9.9.9044      
[10] SeuratObject_4.9.9.9084 sp_1.6-0                toolboxH_0.2.17        
[13] eulerr_7.0.0            testthat_3.1.7          stringr_1.5.0          
[16] scales_1.2.1            readxl_1.4.2            RColorBrewer_1.1-3     
[19] png_0.1-8               fdrtool_1.2.17          R.utils_2.12.2         
[22] R.oo_1.25.0             R.methodsS3_1.8.2       data.table_1.14.8      

loaded via a namespace (and not attached):
  [1] Rtsne_0.16             colorspace_2.1-0       deldir_1.0-6          
  [4] ellipsis_0.3.2         ggridges_0.5.4         rprojroot_2.0.3       
  [7] RcppHNSW_0.4.1         spatstat.data_3.0-1    rstudioapi_0.14       
 [10] farver_2.1.1           leiden_0.4.3           listenv_0.9.0         
 [13] remotes_2.4.2          RSpectra_0.16-1        fansi_1.0.4           
 [16] codetools_0.2-19       splines_4.2.3          knitr_1.42            
 [19] polyclip_1.10-4        spam_2.9-1             jsonlite_1.8.4        
 [22] ica_1.0-3              cluster_2.1.4          uwot_0.1.14           
 [25] spatstat.sparse_3.0-1  shiny_1.7.4            sctransform_0.3.5     
 [28] BiocManager_1.30.20    compiler_4.2.3         httr_1.4.5            
 [31] Matrix_1.5-3           fastmap_1.1.1          lazyeval_0.2.2        
 [34] cli_3.6.1              later_1.3.0            htmltools_0.5.5       
 [37] tools_4.2.3            rsvd_1.0.5             igraph_1.4.1          
 [40] dotCall64_1.0-2        gtable_0.3.3           glue_1.6.2            
 [43] RANN_2.6.1             reshape2_1.4.4         Rcpp_1.0.10           
 [46] scattermore_1.0        cellranger_1.1.0       vctrs_0.6.3           
 [49] nlme_3.1-161           spatstat.explore_3.1-0 progressr_0.13.0      
 [52] lmtest_0.9-40          spatstat.random_3.1-4  xfun_0.38             
 [55] globals_0.16.2         brio_1.1.3             mime_0.12             
 [58] miniUI_0.1.1.1         lifecycle_1.0.3        irlba_2.3.5.1         
 [61] goftest_1.2-3          future_1.32.0          MASS_7.3-58.2         
 [64] zoo_1.8-11             spatstat.utils_3.0-2   promises_1.2.0.1      
 [67] parallel_4.2.3         yaml_2.3.7             gridExtra_2.3         
 [70] reticulate_1.28        pbapply_1.7-0          stringi_1.7.12        
 [73] fastDummies_1.6.3      rlang_1.1.1            pkgconfig_2.0.3       
 [76] matrixStats_0.63.0     evaluate_0.21          lattice_0.20-45       
 [79] tensor_1.5             ROCR_1.0-11            purrr_1.0.2           
 [82] labeling_0.4.2         htmlwidgets_1.6.2      cowplot_1.1.1         
 [85] tidyselect_1.2.0       parallelly_1.35.0      RcppAnnoy_0.0.20      
 [88] plyr_1.8.8             magrittr_2.0.3         R6_2.5.1              
 [91] generics_0.1.3         mgcv_1.8-42            withr_2.5.0           
 [94] pillar_1.9.0           fitdistrplus_1.1-8     abind_1.4-5           
 [97] survival_3.5-0         tibble_3.2.1           future.apply_1.10.0   
[100] KernSmooth_2.23-20     utf8_1.2.3             spatstat.geom_3.1-0   
[103] plotly_4.10.1          rmarkdown_2.21         grid_4.2.3            
[106] digest_0.6.31          xtable_1.8-4           tidyr_1.3.0           
[109] httpuv_1.6.9           munsell_0.5.0          viridisLite_0.4.2 
