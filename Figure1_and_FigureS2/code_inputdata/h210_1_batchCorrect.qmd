---
title: "h210_1_batchCorrect.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# >INITITATE

```{r}

#' # INITIIEREN ####
rm(list = setdiff(ls(), ""))
.libPaths("~/rpackages/angmar/")
.libPaths()
 
library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)

library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 1 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

```

# >AIM

batch correct human data for variable 
# LOAD
```{r}
human_pre = readRDS( here("R/data/seurat_COVID19_freshWB-PBMC_cohort2_rhapsody_jonas_FG_2020-08-18.rds"))
human_pre
```



# add consensus celltypenames
```{r}
consenusnames = read_excel2(here("R/data/All Datasets PopulationsR.xlsx"), "R")
consenusnames_hs = consenusnames[dataset == 'humanSchulteRhaps_blood']
human_pre$uniform_name_overview = consenusnames_hs[match_hk(human_pre$cluster_labels_res.0.8, consenusnames_hs$original_name), uniform_name_overview]


```
# Filter whole blood
```{r}
human_pre$cells %>% table()
human =  subset(human_pre, subset = cells =="Whole_blood")
human

p_before2 = DimPlot(human, group.by = "uniform_name_overview") + ggtitle("Human, not batch corrected", "uniform_name_overview")
p_before2
```

 

# correct batch
## genes to correct
look whether different genes are present in different batches
```{r}
humanlist = SplitObject(object = human, split.by = "orig.ident")
all_genes = lapply(humanlist, rownames)

```

Found folling genes in all batches
```{r}
sapply(all_genes, length)
intersecti = Reduce(intersect, all_genes)
str(intersecti)

```

Following genes are not in the intersect:
```{r}
rownames(human)[rownames(human) %nin% intersecti]
```
The difference of 12 is due to the HTO genes




##  batch uncorrected

```{r}
human
p_before = DimPlot(human, group.by = c("orig.ident"), shuffle = T) + ggtitle("Human, not batch corrected", "orig.ident")


p_before2 = DimPlot(human, group.by = c("cluster_labels_res.0.8"), shuffle = T) + ggtitle("human, not corrected", "cluster_labels_res.0.8")
(p_before  + p_before2) %>% plotly::ggplotly()
```


## fastmnn
with standard 2000 features,

```{r fastmnn}
human$orig.ident %>% table()
human <- NormalizeData(human)
human <- FindVariableFeatures(human)
human <- RunFastMNN(object.list = SplitObject(human, split.by = "orig.ident"))
human <- RunUMAP(human, reduction = "mnn", dims = 1:30)
human <- FindNeighbors(human, reduction = "mnn", dims = 1:30)
human <- FindClusters(human)
p_mnn = DimPlot(human, group.by = c("orig.ident"), shuffle = T) + ggtitle("Human, MNN corrected", "orig.ident")
p_before + NoLegend()+( p_mnn + NoLegend())

p_mnn2 = DimPlot(human, group.by = c("cluster_labels_res.0.8"), shuffle = T) + ggtitle("human, mmn corrected", "cluster_labels_res.0.8")

p_before2 + p_mnn2
```

The corrected assay has the dimension of # variable genes:
```{r}
human@assays$mnn.reconstructed %>% dim()

```


with standard 2000 features,
not used, as not every gene was corrected

## COMBAT
```{r combat}
barplot(table(human$orig.ident) %>% sort(), main = "Table techn. batches (orig.ident)")
m = as.data.frame(as.matrix(human@assays$RNA@data))
com = ComBat(dat=m, batch=human@meta.data$orig.ident, prior.plots=TRUE, par.prior=TRUE)
```

### genes not in COMBAT
As Combat does not correct genes with uniform expression within a single batch (all zeros); these should be annotated
```{r genes_per_batch, fig.width=21, fig.height=14}

genes_per_batch =  lapply(names(humanlist), function(myname) 
{
  # myname= names(humanlist)[1]
  mylist = humanlist[[myname]]
  n_genes = mylist@assays$RNA@data %>% rowSums()
  data.table(gene  = names(n_genes), num = n_genes)
}
) %>% rbindlist()

genes_per_batch_0 =  genes_per_batch[gene %in% gene[num==0], .(gene,mini = min(num), maxi = max(num)), gene]
genes_per_batch_0
some_immungenes_anybatch_0 = grep("^CCL|^IL", genes_per_batch_0$gene, value = T) %>% sort()
FeaturePlot(human, some_immungenes_anybatch_0[sample(length(some_immungenes_anybatch_0),12)])
FeaturePlot(human, genes_per_batch_0[order(-maxi), gene][1:12])
```

plot batch
```{r combatrebuilt}
human.combat <- human
human.combat@assays$RNA@data = Matrix::Matrix(as.matrix(com))
human.combat <- FindVariableFeatures(human.combat,nfeatures =2000 )

```

 

# Cluster 
```{r plotcombat,fig.width=16}
human.combat = ScaleData(human.combat)
str(VariableFeatures(human.combat))
human.combat <- RunPCA(object = human.combat,  do.print = T, npcs = 40)

human.combat <- RunUMAP(human.combat, reduction = "pca", dims = 1:30)
human.combat <- FindNeighbors(human.combat, reduction = "pca", dims = 1:30)
human.combat <- FindClusters(human.combat)
```

# plot
plot all celltypes with orig.ident and with and without batch adjustment


```{r}
umapdat_combat = data.table(human.combat@reductions$umap@cell.embeddings, keep.rownames = T)
umapdat_raw = data.table(human_pre[, umapdat_combat$rn]@reductions$umap@cell.embeddings, keep.rownames = T)
annocells = human.combat@meta.data %>% as.data.table(keep.rownames = T)
stopifnot(identical(umapdat_combat$rn, umapdat_raw$rn))
stopifnot(identical(umapdat_combat$rn, annocells$rn))

plotdat = rbind(
  cbind(annocells[,.(rn,orig.ident, uniform_name_overview, seurat_clusters, who_per_sample)],
                umapdat_raw[,-"rn"], 
        batch = "raw"
        ),
  cbind(annocells[,.(rn,orig.ident, uniform_name_overview, seurat_clusters, who_per_sample)],
                umapdat_combat[,-"rn"], 
        batch = "combat"
        )
  )


plotdatm = melt(plotdat, id.vars = c("rn", "uniform_name_overview", "seurat_clusters", "batch","UMAP_1", "UMAP_2"), measure.vars = c("who_per_sample", "orig.ident"))
```

# visualisation via trelliscopt
in local R

```{r}
fwrite(plotdatm, here("R/results/h210_1_clusterdat_umap_before_after_combat.txt.gz"))
```

# als pdf
```{r}

mycolors = c("red", "green", "blue", "orange", "magenta", "yellow", "black", "gray", "white", "darkred", "brown1", "darkblue", "darkcyan", "darkmagenta", "gold1", "gray10", "gray20", "purple1", "pink1", "darkgreen", "cyan")

allplot = lapply(unique(plotdatm$uniform_name_overview), function(mytissue) {
  # mytissue = plotdatm$uniform_name_overview[1]
  myplotdat = plotdatm[uniform_name_overview==mytissue]
  myn = nrow(myplotdat)
  myp =  ggplot(myplotdat, aes(UMAP_1, UMAP_2, col = value)) +
  geom_point(alpha = 0.1, size = 0.5 ) + 
  facet_wrap(~variable +batch, scales = "free")  +
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  scale_color_manual(values = mycolors)+
    theme_minimal(base_size = 16)
  myplot = myp + ggtitle(mytissue, subtitle = paste("N = ", myn))
  plot(myplot)
  myplot
}) 
length(allplot)

pdf(here("R/results/h210_1_clusterdat_umap_before_after_combat.pdf"), height = 9,width =  15)
lapply(allplot, function(x) plot(x))
dev.off()

```


# SAVE

```{r saving}
fwrite(genes_per_batch_0, here(paste0("R/results/h210_1_genes_in_any_batch0.txt.gz")))
saveRDS(human.combat, here(paste0("R/results/h210_1_human_wb_rhaps_combat.rds")))


```




# finalize

```{r}
finalizeSkript()

```

Session Info::
R version 4.2.2 (2022-10-31)
Platform: x86_64-suse-linux-gnu (64-bit)
Running under: openSUSE Leap 15.3

Matrix products: default
BLAS:   /usr/lib64/R/lib/libRblas.so
LAPACK: /usr/lib64/R/lib/libRlapack.so

Random number generation:
 RNG:     L'Ecuyer-CMRG 
 Normal:  Inversion 
 Sample:  Rejection 
 
locale:
 [1] LC_CTYPE=de_DE.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=de_DE.UTF-8    
 [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=de_DE.UTF-8   
 [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] future_1.32.0        sva_3.44.0           BiocParallel_1.30.4 
 [4] genefilter_1.78.0    mgcv_1.8-40          nlme_3.1-159        
 [7] ggplot2_3.4.1        here_1.0.1           SeuratWrappers_0.3.1
[10] SeuratObject_4.1.3   Seurat_4.3.0         toolboxH_0.2.17     
[13] eulerr_6.1.1         testthat_3.1.4       stringr_1.5.0       
[16] scales_1.2.1         readxl_1.4.1         RColorBrewer_1.1-3  
[19] png_0.1-8            fdrtool_1.2.17       R.utils_2.12.0      
[22] R.oo_1.25.0          R.methodsS3_1.8.2    data.table_1.14.8   

loaded via a namespace (and not attached):
  [1] utf8_1.2.3                  spatstat.explore_3.0-6     
  [3] reticulate_1.28             tidyselect_1.2.0           
  [5] RSQLite_2.2.16              AnnotationDbi_1.58.0       
  [7] htmlwidgets_1.6.1           grid_4.2.2                 
  [9] Rtsne_0.16                  munsell_0.5.0              
 [11] ScaledMatrix_1.4.0          codetools_0.2-18           
 [13] ica_1.0-3                   miniUI_0.1.1.1             
 [15] withr_2.5.0                 batchelor_1.12.3           
 [17] spatstat.random_3.1-3       colorspace_2.1-0           
 [19] progressr_0.13.0            Biobase_2.56.0             
 [21] knitr_1.39                  SingleCellExperiment_1.18.0
 [23] stats4_4.2.2                ROCR_1.0-11                
 [25] tensor_1.5                  listenv_0.9.0              
 [27] MatrixGenerics_1.8.1        labeling_0.4.2             
 [29] GenomeInfoDbData_1.2.8      polyclip_1.10-4            
 [31] bit64_4.0.5                 farver_2.1.1               
 [33] rprojroot_2.0.3             parallelly_1.35.0          
 [35] vctrs_0.5.2                 generics_0.1.3             
 [37] xfun_0.31                   R6_2.5.1                   
 [39] GenomeInfoDb_1.32.3         rsvd_1.0.5                 
 [41] locfit_1.5-9.6              bitops_1.0-7               
 [43] spatstat.utils_3.0-1        cachem_1.0.7               
 [45] DelayedArray_0.22.0         assertthat_0.2.1           
 [47] promises_1.2.0.1            gtable_0.3.1               
 [49] beachmat_2.12.0             globals_0.16.2             
 [51] goftest_1.2-3               rlang_1.0.6                
 [53] splines_4.2.2               lazyeval_0.2.2             
 [55] spatstat.geom_3.0-6         BiocManager_1.30.20        
 [57] yaml_2.3.5                  reshape2_1.4.4             
 [59] abind_1.4-5                 crosstalk_1.2.0            
 [61] httpuv_1.6.9                tools_4.2.2                
 [63] ellipsis_0.3.2              BiocGenerics_0.42.0        
 [65] ggridges_0.5.4              Rcpp_1.0.10                
 [67] plyr_1.8.8                  sparseMatrixStats_1.8.0    
 [69] zlibbioc_1.42.0             purrr_1.0.1                
 [71] RCurl_1.98-1.8              deldir_1.0-6               
 [73] pbapply_1.7-0               cowplot_1.1.1              
 [75] S4Vectors_0.34.0            zoo_1.8-11                 
 [77] SummarizedExperiment_1.26.1 ggrepel_0.9.3              
 [79] cluster_2.1.4               magrittr_2.0.3             
 [81] scattermore_1.0             ResidualMatrix_1.6.1       
 [83] lmtest_0.9-40               RANN_2.6.1                 
 [85] fitdistrplus_1.1-8          matrixStats_0.63.0         
 [87] patchwork_1.1.2             mime_0.12                  
 [89] evaluate_0.15               xtable_1.8-4               
 [91] XML_3.99-0.10               IRanges_2.30.1             
 [93] gridExtra_2.3               compiler_4.2.2             
 [95] tibble_3.2.1                KernSmooth_2.23-20         
 [97] crayon_1.5.2                htmltools_0.5.4            
 [99] later_1.3.0                 tidyr_1.3.0                
[101] DBI_1.1.3                   MASS_7.3-58.1              
[103] Matrix_1.5-3                brio_1.1.3                 
[105] cli_3.6.0                   parallel_4.2.2             
[107] igraph_1.4.1                GenomicRanges_1.48.0       
[109] pkgconfig_2.0.3             sp_1.6-0                   
[111] scuttle_1.6.3               plotly_4.10.1              
[113] spatstat.sparse_3.0-0       annotate_1.74.0            
[115] XVector_0.36.0              digest_0.6.31              
[117] sctransform_0.3.5           RcppAnnoy_0.0.20           
[119] spatstat.data_3.0-0         Biostrings_2.64.1          
[121] rmarkdown_2.14              cellranger_1.1.0           
[123] leiden_0.4.3                uwot_0.1.14                
[125] edgeR_3.38.4                DelayedMatrixStats_1.18.2  
[127] shiny_1.7.4                 lifecycle_1.0.3            
[129] jsonlite_1.8.4              BiocNeighbors_1.14.0       
[131] viridisLite_0.4.1           limma_3.52.3               
[133] fansi_1.0.4                 pillar_1.9.0               
[135] lattice_0.20-45             KEGGREST_1.36.3            
[137] fastmap_1.1.0               httr_1.4.5                 
[139] survival_3.4-0              glue_1.6.2                 
[141] remotes_2.4.2               bit_4.0.5                  
[143] stringi_1.7.12              blob_1.2.3                 
[145] BiocSingular_1.12.0         memoise_2.0.1              
[147] dplyr_1.0.10                irlba_2.3.5.1              
[149] future.apply_1.10.0   
