---
title: "h225_5_QC_integrated_clusters_allspecies"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r results='hide', message=FALSE}

#' # INITIIEREN ####
set.seed(192)
.libPaths()
library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(patchwork)
library(BiocParallel)
library(scDblFinder)
library(pander)
  require(ggsankey)
  require(ggrepel)

  require(dplyr)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# AIM

QC including qC cluster definition all species 

# Dataimport


```{r results='hide'}

seurat = readRDS(here("R/results/h224_3_seurat_integrated_harmony_rpca_fastMNN_layersjoined.rds"))

plot_ggSankey_hk(seurat@meta.data[, c("rpca_clusters", 'uniform_name_overview')] %>% data.table())
plot_ggSankey_hk(seurat@meta.data[, c( "rpca_clusters",'species')] %>% data.table())
plot_ggSankey_hk(seurat@meta.data[, c( "rpca_clusters",'lowQC_or_doublet')] %>% data.table())

```


Define core cell QC parameter
```{r}

core_cellparam = c("nFeature_RNA", 'pct_counts_in_top_50_genes',"pct.ribo",
                   "nCount_RNA",  "pct.mito",  "pct.hb")


```




```{r results='hide'}
testthat::test_that("All intended qc metrices are available in Seurat", expect_length(setdiff(c(core_cellparam), names(seurat@meta.data)),0))

cellannopre3 = seurat@meta.data %>% data.table(keep.rownames = T)
```



# Filter  bad cluster




```{r }
 
lowQC_proz = cellannopre3[, .N, lowQC_cluster]
lowQC_proz[, prozi := (N / sum(N)) %>% proz() ]


cellannopre3[,.N, .(dbl_doubletsum_1gr0, dbl_doubletsumgr0, species)]
cellannopre3[, dbl_doubletsumgr0 := ifelse(is.na(dbl_doubletsumgr0), dbl_doubletsum_1gr0, dbl_doubletsumgr0)]
seurat$dbl_doubletsumgr0 = ifelse(is.na(seurat$dbl_doubletsumgr0), seurat$dbl_doubletsum_1gr0, seurat$dbl_doubletsumgr0)


doublet2_proz = cellannopre3[, .N, dbl_doubletsumgr0]
doublet2_proz[, prozi := (N / sum(N)) %>% proz() ]

lowQC_or_doublet = cellannopre3[, .N, .(dbl_doubletsumgr0 | lowQC_cluster)]
lowQC_or_doublet[, prozi := (N / sum(N)) %>% proz() ]

```

If any of the cells does not adhere to these cutoffs (`r lowQC_proz[lowQC_cluster==T, prozi]`) or is found to be positive in any doublet tests with expected doublet rate of 1% (`r doublet2_proz[dbl_doubletsumgr0==T, prozi]`), it is marked potential bad QC cell (`r lowQC_or_doublet[dbl_doubletsumgr0 ==T, prozi]`)


On the base of this  clustering level, I will clusterwise define bad QC cells. However, I will additionally identify bad clusters based on the integrated object

```{r results='hide',fig.width=10, fig.height=12}
seurat$lowQC_cluster = cellannopre3[match_hk(colnames(seurat), cellannopre3$rn),lowQC_cluster]
seurat$lowQC_cluster %>% mytable()

seurat$dbl_doublet = seurat$dbl_doubletsumgr0
cellannopre3$dbl_doublet = seurat$dbl_doubletsumgr0
seurat$dbl_doublet %>% mytable()

seurat$lowQC_or_doublet = seurat$dbl_doubletsumgr0 |seurat$lowQC_cluster
cellannopre3[, lowQC_or_doublet := dbl_doubletsumgr0 |lowQC_cluster]
seurat$lowQC_or_doublet %>% mytable()

p1 = DimPlot(reduction = "umap.rpca", raster= FALSE,seurat, group.by = c("rpca_clusters","uniform_name_overview"), label  = T ) & guides(color = "none") 
# p2 = DimPlot(reduction = "umap.rpca", raster= FALSE,seurat, group.by =  c('lowQC_cluster', 'dbl_doublet', 'lowQC_or_doublet')) &  theme(legend.position = "top")
p2 = DimPlot(reduction = "umap.rpca", raster= FALSE,seurat, group.by =  c('lowQC_cluster', 'dbl_doublet',"lowQC_or_doublet"), shuffle = T ) &  theme(legend.position = "top")

p1/p2

```


```{r results='hide', fig.width=15, fig.height=9}
lowQC_or_doublet_df = rbind(
  cbind(variable = "lowQC_cluster", cellannopre3[, .N, .(rpca_clusters, badqc = lowQC_cluster)]),
  cbind(variable = "dbl_doublet", cellannopre3[, .N, .(rpca_clusters, badqc = dbl_doublet)]),
  cbind(variable = "lowQC_or_doublet", cellannopre3[, .N, .(rpca_clusters, badqc = lowQC_or_doublet)])
)

lowQC_or_doublet_df[, prozent := N/sum(N), .(rpca_clusters, variable)]
bad_clusterIDs_pre = lowQC_or_doublet_df[variable =='lowQC_or_doublet' & prozent>0.5 & badqc==TRUE,rpca_clusters] %>% sort()

lowQC_or_doublet_df[, bad_cluster := rpca_clusters %in% bad_clusterIDs_pre]


lowQC_or_doublet_df[, cells_in_cluster := sum(N), .(rpca_clusters, variable)]

setorder(lowQC_or_doublet_df, -cells_in_cluster)
lowQC_or_doublet_df[, rpca_clusters_ordered_by_N_decreasing := factor(rpca_clusters, levels = unique(rpca_clusters))]

p4 = (ggplot(lowQC_or_doublet_df[badqc == TRUE], aes(rpca_clusters_ordered_by_N_decreasing, prozent, fill = variable, alpha = bad_cluster)) + geom_col(position = "dodge") + 
    
        geom_hline(yintercept = 0.5, lty = 2) + scale_y_continuous(label = label_percent(accuracy = 1), breaks = pretty_breaks(10))) + theme(legend.position = "top") + scale_alpha_manual(values = c(0.5, 1))
```


```{r results='hide', fig.width=15, fig.height=9}
lowQC_or_doublet_dfcelltype = rbind(
  cbind(variable = "lowQC_cluster", cellannopre3[, .N, .(uniform_name_overview, badqc = lowQC_cluster)]),
  cbind(variable = "dbl_doublet", cellannopre3[, .N, .(uniform_name_overview, badqc = dbl_doublet)]),
  cbind(variable = "lowQC_or_doublet", cellannopre3[, .N, .(uniform_name_overview, badqc = lowQC_or_doublet)])
)

lowQC_or_doublet_dfcelltype[, prozent := N/sum(N), .(uniform_name_overview, variable)]

bad_celltype = lowQC_or_doublet_dfcelltype[variable =='lowQC_or_doublet' & prozent>0.5 & badqc==TRUE,uniform_name_overview]
# 

lowQC_or_doublet_dfcelltype[, bad_cluster_celltype := uniform_name_overview %in% bad_celltype]


lowQC_or_doublet_dfcelltype[, cells_in_cluster := sum(N), .(uniform_name_overview, variable)]

setorder(lowQC_or_doublet_dfcelltype, -cells_in_cluster)
lowQC_or_doublet_dfcelltype[, uniform_name_overview_ordered_by_N_decreasing := factor(uniform_name_overview, levels = unique(uniform_name_overview))]

p4_celltype = (ggplot(lowQC_or_doublet_dfcelltype[badqc == TRUE], aes(uniform_name_overview_ordered_by_N_decreasing, prozent, fill = variable, alpha = bad_cluster_celltype)) + geom_col(position = "dodge") + 
               
                 geom_hline(yintercept = 0.5, lty = 2) + scale_y_continuous(label = label_percent(accuracy = 1), breaks = pretty_breaks(10))) + theme(legend.position = "top") + scale_alpha_manual(values = c(0.5, 1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```



```{r results='hide', fig.width=15, fig.height=20}
p55 = DimPlot(reduction = "umap.rpca", raster= FALSE,seurat, group.by = c("rpca_clusters",'lowQC_or_doublet_cluster','uniform_name_overview' ), label = T, shuffle = T) & NoLegend()
(p4+p4_celltype)/p55
```

```{r}
jpeg2(here("R/results/h225_5_defining_bad_clusters_details1_integrated.jpeg"), 14,10)
plot((p4+p4_celltype)/p55)
dev.off()
```



## show problems of problematic cell clusters
```{r}
plot_qc_with_cutoffs <- function(cellannotation, stratifycol, doubletcol, core_cellparam,qc_cutofftable) {
  plot1 = ggplot(melt(cellannotation, id.vars = c(stratifycol,'species'), measure.vars = core_cellparam), aes( x=.data[[stratifycol]],y=value, fill =species)) +
    geom_violin(scale = "width")  + 
    facet_wrap(~variable, 
               scales= "free") + 
    theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.4), 
          legend.position = "top")  + 
    guides(fill = "none")+ geom_hline(data = qc_cutofftable, aes(yintercept = value, col = species), lty = 2)
  
  plot2 = ggplot(cellannotation, aes( .data[[stratifycol]], fill =.data[[doubletcol]])) +
    geom_bar(position = "fill")  + 
    theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.4), 
          legend.position = "top")
  plot1 + plot2 + plot_layout(widths = c(4,1))
    
}


cutoff_hamsterMA = read_excel2(here("R/results/h221_5_qc_cutoffcluster_hamsterMA.xlsx")) %>% .[,species:="hamsterMA"]

cutoff_hamsterPR = read_excel2(here("R/results/h222_2_qc_cutoffcluster_hamsterPR.xlsx")) %>% .[,species:="hamsterPR"]

cutoff_human = read_excel2(here("R/results/h220_5_qc_cutoffcluster_human.xlsx")) %>% .[,species:="human"]

cutoff_cluster = rbind(cutoff_hamsterMA,
                       cutoff_hamsterPR,
                       cutoff_human)

p16all = plot_qc_with_cutoffs(cellannotation = cellannopre3[],stratifycol = "rpca_clusters",doubletcol = "dbl_doubletsumgr0",
                                          
                                          qc_cutofftable  = cutoff_cluster[variable %in% core_cellparam[c(1,4,5)]],
                                          core_cellparam = core_cellparam[c(1,4,5)]
                                            
                                            )+ 
    plot_annotation(title = "bad clusters integrated rpca", "not filtered")

p16all + plot_layout(ncol = 1, nrow=2)

p16a = plot_qc_with_cutoffs(cellannotation = cellannopre3[rpca_clusters %in% bad_clusterIDs_pre],stratifycol = "rpca_clusters",doubletcol = "dbl_doubletsumgr0",
                                          
                                          qc_cutofftable  = cutoff_cluster,
                                          core_cellparam = core_cellparam
                                            
                                            )+ 
    plot_annotation(title = "bad clusters integrated rpca", "not filtered")


p16b = plot_ggSankey_hk(cellannopre3[rpca_clusters %in% bad_clusterIDs_pre,.(rpca_clusters, uniform_name_overview )])



p16a+p16b  +plot_layout(widths = c(4,1,2))

```

```{r}
jpeg2(here("R/results/h225_5_definign_bad_clusters_details2_integrated.jpeg"), 20,10)
plot(p16a+p16b  +plot_layout(widths = c(4,1,2)))
dev.off()

```


We exclude all these clusters but 40 as it is largely confounded with Plasmablasts and 30 from neutrophils

```{r results='hide'}
bad_clusterIDs = setdiff(bad_clusterIDs_pre, c(30,40))
seurat$lowQC_or_doublet_clusterIntegrated = seurat$rpca_clusters %in% bad_clusterIDs
tableeintraege = seurat$lowQC_or_doublet_clusterIntegrated %>% mytable() %>% unlist()

```

As bad cluster, I consider only cluster not excluding a whole celltype. Hence, I mark clusters `r bad_clusterIDs %>% pander()`, i.e. N= `r tableeintraege['observed2'] %>% as.character()` I do not exclude the other cluster, as it corresponds to a single celltype


```{r}
cellannopre3b = seurat@meta.data %>% as.data.table(keep.rownames = T)
draussen = cellannopre3b[,.N, .(lowQC_or_doublet_clusterIntegrated, uniform_name_overview)]
draussen[, prozent := N/sum(N) , uniform_name_overview]
draussen[, prozent2 :=prozent %>% proz()]

draussen[lowQC_or_doublet_clusterIntegrated==T][order(-prozent)][,.(uniform_name_overview,N, prozent2)] %>% pander()


cellannopre3b[rpca_clusters==25 , .N, .(rpca_clusters,uniform_name_overview,lowQC_or_doublet_clusterIntegrated, species )][order(N)] %>% .[,proz := (N/sum(N)) %>% proz()] %>% knitr::kable()

```



# filter  also already filtered cells

```{r}
seurat$QC_bad_2_exclude = seurat$lowQC_or_doublet_cell |seurat$lowQC_or_doublet_clusterIntegrated

tableeintraege_single = seurat$lowQC_or_doublet_cell %>% mytable() %>% unlist()

tableeintraege_all = seurat$QC_bad_2_exclude %>% mytable() %>% unlist()

```

In addition to the bad cells due to bad clusters on single study level and independently of clusters defined bad cells there (jointly `r tableeintraege_single["observed2"]`) now we exclude the bad cluster based on integration clustering (`r tableeintraege['observed2']`, we totally exclude as bad QC: `r tableeintraege_all['observed2']` cells

```{r}
seurat2 = seurat[, seurat$QC_bad_2_exclude==F]
```

We can go with the uniform name overview, as it is largely compatible with clusters.
```{r}
plot_ggSankey_hk(seurat2@meta.data[, c("rpca_clusters", "uniform_name_overview")] %>% data.table())
```

Regarding cd4 and cd8 t cells
```{r}
cellannofilt = seurat2@meta.data %>% data.table()
cellannofilt[uniform_name_overview=="T_Cells", .N, rpca_clusters]

p_tcell = plot_ggSankey_hk(cellannofilt[rpca_clusters %in% rpca_clusters[uniform_name_overview=="T_Cells"], .(rpca_clusters, uniform_name_overview)] %>% .[grepl("T_C", uniform_name_overview)])

pdf(here("R/results/h225_5_clusters_unassigned_TCells.pdf"),6,6)
p_tcell
dev.off()
```

however, due to the not clear of the largest cluster and the not so high number these are marked as unknown 
```{r}
cellannofilt[,unique(uniform_name_overview)]
seurat2$uniform_name_overview = ifelse(is.na(seurat2$uniform_name_overview) | seurat2$uniform_name_overview=="T_Cells", "unknown", seurat2$uniform_name_overview)

cellannofilt2 = seurat2@meta.data %>% data.table(keep.rownames = T)
cellannofilt2[,unique(uniform_name_overview)]

```


```{r}
cellannofilt2[, .N, .(species, uniform_name_overview)]

```

# repeat integration with QC good cells, only


```{r}
 getOption("Seurat.object.assay.version")

# convert a v3 assay to a v5 assay
seurat2[["RNA"]] <- as(object = seurat2[["RNA"]], Class = "Assay5")


seurat2[["RNA"]] <- split(seurat2[["RNA"]], f = seurat2$run10x)
seurat2
seurat2 <- NormalizeData(seurat2)
seurat2 <- FindVariableFeatures(seurat2)# evtl exclude qc genes???  
seurat2 <- ScaleData(seurat2)
seurat2 <- RunPCA(seurat2, reduction.name = "pca2")

p_elbow= ElbowPlot(seurat2, reduction = "pca") +ElbowPlot(seurat2, reduction = "pca2") & ylim(c(0,12))
p_elbow

jpeg2(here("R/Results/h225_5_seurat_integrated_rpca_QCfiltered_pcav2_ELLBOWvgl.jpeg"), 9, 4)
plot(p_elbow)
dev.off()
```

```{r integratelayersrpca}
seurat2 <- IntegrateLayers(
  object = seurat2, method = RPCAIntegration,
  orig.reduction = "pca2", new.reduction = 'integrated.rpca.v2',
  verbose = TRUE)
```

```{r}
seurat2 <- FindNeighbors(seurat2, reduction = 'integrated.rpca.v2', dims = 1:30)
seurat2 <- FindClusters(seurat2,resolution = 2, cluster.name = 'rpca_clusters.v2')
seurat2 <- RunUMAP(seurat2, reduction = "integrated.rpca.v2", dims = 1:30, reduction.name = 'umap.rpca.v2')
p5 <- DimPlot(
  seurat2, reduction = "umap.rpca.v2",
  group.by = c("run10x", "uniform_name_overview", "rpca_clusters.v2", "species"),
  combine = TRUE, 
  raster= FALSE, 
  label = T) & NoLegend()
p5
```



# SAVE plot
```{r}
jpeg2(here("R/Results/h225_5_seurat_integrated_rpca_QCfiltered_pcav2.jpeg"), 24, 18)
plot(p5)
dev.off()

```

Once integrative analysis is complete, you can rejoin the layers - which collapses the individual datasets together and recreates the original `counts` and `data` layers. You will need to do this before performing any differential expression analysis. However, you can always resplit the layers in case you would like to reperform integrative analysis.

```{r joinlayers}
seurat2 <- JoinLayers(seurat2)
seurat2
```

```{r saving}
cellanno = seurat@meta.data %>% as.data.table(keep.rownames = T)
fwrite(cellanno, here("R/results/h225_5_qc_integrated_rpca_cellanno.txt.gz"))

cellannofiltered3 = seurat2@meta.data %>% as.data.table(keep.rownames = T)
fwrite(cellannofiltered3, here("R/results/h225_5_qc_integrated_rpca_cellanno_FILTERED.txt.gz"))


saveRDS(seurat2, here("R/results/h225_5_seurat_integrated_rpca_FILTERED.RDS"))
```

# finalize

```{r}
finalizeSkript()

```

R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

Random number generation:
 RNG:     L'Ecuyer-CMRG 
 Normal:  Inversion 
 Sample:  Rejection 
 
locale:
[1] LC_COLLATE=German_Germany.utf8  LC_CTYPE=German_Germany.utf8   
[3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.utf8    

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] future_1.32.0               dplyr_1.1.1                
 [3] ggrepel_0.9.3               ggsankey_0.0.99999         
 [5] pander_0.6.5                scDblFinder_1.12.0         
 [7] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0
 [9] Biobase_2.58.0              GenomicRanges_1.50.2       
[11] GenomeInfoDb_1.34.9         IRanges_2.32.0             
[13] S4Vectors_0.36.1            BiocGenerics_0.44.0        
[15] MatrixGenerics_1.10.0       matrixStats_0.63.0         
[17] patchwork_1.1.2             sva_3.46.0                 
[19] BiocParallel_1.32.5         genefilter_1.80.3          
[21] mgcv_1.8-42                 nlme_3.1-161               
[23] ggplot2_3.4.2               here_1.0.1                 
[25] SeuratWrappers_0.3.19       Seurat_4.9.9.9044          
[27] SeuratObject_4.9.9.9084     sp_1.6-0                   
[29] toolboxH_0.2.17             eulerr_7.0.0               
[31] testthat_3.1.7              stringr_1.5.0              
[33] scales_1.2.1                readxl_1.4.2               
[35] RColorBrewer_1.1-3          png_0.1-8                  
[37] fdrtool_1.2.17              R.utils_2.12.2             
[39] R.oo_1.25.0                 R.methodsS3_1.8.2          
[41] data.table_1.14.8          

loaded via a namespace (and not attached):
  [1] rtracklayer_1.58.0        scattermore_1.0          
  [3] tidyr_1.3.0               bit64_4.0.5              
  [5] knitr_1.42                irlba_2.3.5.1            
  [7] DelayedArray_0.24.0       KEGGREST_1.38.0          
  [9] RCurl_1.98-1.9            generics_0.1.3           
 [11] ScaledMatrix_1.6.0        cowplot_1.1.1            
 [13] RSQLite_2.2.20            RANN_2.6.1               
 [15] bit_4.0.5                 spatstat.data_3.0-1      
 [17] httpuv_1.6.9              viridis_0.6.2            
 [19] xfun_0.38                 evaluate_0.21            
 [21] promises_1.2.0.1          fansi_1.0.4              
 [23] restfulr_0.0.15           igraph_1.4.1             
 [25] DBI_1.1.3                 htmlwidgets_1.6.2        
 [27] spatstat.geom_3.1-0       purrr_1.0.1              
 [29] ellipsis_0.3.2            RSpectra_0.16-1          
 [31] annotate_1.76.0           deldir_1.0-6             
 [33] sparseMatrixStats_1.10.0  vctrs_0.6.1              
 [35] remotes_2.4.2             ROCR_1.0-11              
 [37] abind_1.4-5               cachem_1.0.7             
 [39] withr_2.5.0               progressr_0.13.0         
 [41] sctransform_0.3.5         GenomicAlignments_1.34.0 
 [43] scran_1.26.2              goftest_1.2-3            
 [45] cluster_2.1.4             dotCall64_1.0-2          
 [47] lazyeval_0.2.2            crayon_1.5.2             
 [49] spatstat.explore_3.1-0    edgeR_3.40.2             
 [51] pkgconfig_2.0.3           labeling_0.4.2           
 [53] vipor_0.4.5               pkgload_1.3.2            
 [55] rlang_1.1.0               globals_0.16.2           
 [57] lifecycle_1.0.3           miniUI_0.1.1.1           
 [59] fastDummies_1.6.3         rsvd_1.0.5               
 [61] cellranger_1.1.0          rprojroot_2.0.3          
 [63] polyclip_1.10-4           RcppHNSW_0.4.1           
 [65] lmtest_0.9-40             Matrix_1.5-3             
 [67] zoo_1.8-11                beeswarm_0.4.0           
 [69] ggridges_0.5.4            viridisLite_0.4.2        
 [71] rjson_0.2.21              bitops_1.0-7             
 [73] KernSmooth_2.23-20        spam_2.9-1               
 [75] Biostrings_2.66.0         blob_1.2.3               
 [77] DelayedMatrixStats_1.20.0 parallelly_1.35.0        
 [79] spatstat.random_3.1-4     beachmat_2.14.0          
 [81] memoise_2.0.1             magrittr_2.0.3           
 [83] plyr_1.8.8                ica_1.0-3                
 [85] zlibbioc_1.44.0           compiler_4.2.3           
 [87] dqrng_0.3.0               BiocIO_1.8.0             
 [89] fitdistrplus_1.1-8        Rsamtools_2.14.0         
 [91] cli_3.6.1                 XVector_0.38.0           
 [93] listenv_0.9.0             pbapply_1.7-0            
 [95] MASS_7.3-58.2             tidyselect_1.2.0         
 [97] stringi_1.7.12            yaml_2.3.7               
 [99] BiocSingular_1.14.0       locfit_1.5-9.7           
[101] grid_4.2.3                tools_4.2.3              
[103] future.apply_1.10.0       parallel_4.2.3           
[105] rstudioapi_0.14           bluster_1.8.0            
[107] metapod_1.6.0             gridExtra_2.3            
[109] farver_2.1.1              Rtsne_0.16               
[111] digest_0.6.31             BiocManager_1.30.20      
[113] shiny_1.7.4               Rcpp_1.0.10              
[115] scuttle_1.8.4             later_1.3.0              
[117] RcppAnnoy_0.0.20          httr_1.4.5               
[119] AnnotationDbi_1.60.0      colorspace_2.1-0         
[121] brio_1.1.3                XML_3.99-0.13            
[123] tensor_1.5                reticulate_1.28          
[125] splines_4.2.3             uwot_0.1.14              
[127] statmod_1.5.0             spatstat.utils_3.0-2     
[129] scater_1.26.1             xgboost_1.7.5.1          
[131] plotly_4.10.1             xtable_1.8-4             
[133] jsonlite_1.8.4            R6_2.5.1                 
[135] pillar_1.9.0              htmltools_0.5.5          
[137] mime_0.12                 glue_1.6.2               
[139] fastmap_1.1.1             BiocNeighbors_1.16.0     
[141] codetools_0.2-19          utf8_1.2.3               
[143] lattice_0.20-45           spatstat.sparse_3.0-1    
[145] tibble_3.2.1              ggbeeswarm_0.7.1         
[147] leiden_0.4.3              survival_3.5-0           
[149] limma_3.54.0              rmarkdown_2.21           
[151] desc_1.4.2                munsell_0.5.0            
[153] GenomeInfoDbData_1.2.9    reshape2_1.4.4           
[155] gtable_0.3.3 
