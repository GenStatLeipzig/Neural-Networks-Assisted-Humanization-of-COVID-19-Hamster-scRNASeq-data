---
title: "h215_2_additional_doubletten_check_human.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# >INITITATE

```{r}

#' # INITIIEREN ####
rm(list = setdiff(ls(), "seurat"))
.libPaths("~/rpackages/angmar/")


library(Seurat)
library(SeuratWrappers)
library(toolboxH)
library(here)
library(ggplot2)
library(ggthemes)
library(scales)
library(sva)
library(BiocParallel)
library(scDblFinder)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

doSCTransform = function(seuratobject, experimentIDcol = "run10x", variable.features.n = 4000, ...) {
  # seuratobject = mouse;experimentIDcol = "run10x"

  message(Sys.time(), "...Running Seurat SCT separately on following cells:")
  mytable(seuratobject[[experimentIDcol]])

  n_experiments = uniqueN(names(table(seuratobject[[experimentIDcol]])))

  if(n_experiments ==1) seuratobject_list = list(seuratobject) else seuratobject_list <- SplitObject(object = seuratobject, split.by = experimentIDcol)
  seuratobject_list


  for (i in 1:length(seuratobject_list)) {
    # i=1
    message(Sys.time(), "...SCT on ", i, "\n-------------------------------------------------------")
    seuratobject_list[[i]] <- SCTransform(seuratobject_list[[i]], verbose = T,variable.features.n = variable.features.n, ... ) # TODO include "G2M.Score", "S.Score" regression if necessary
  }
  print(table(names(warnings() ))) #
  message(Sys.time(), '...Notes about warning:\n"iteration limit reached"\nChristophH commented on 22 May 2019 - These warnings are showing that there are some genes for which it is hard to reliably estimate theta (presumably because of very few non-zero observations). Usually we donÂ´t worry about these warnings too much, since we regularize the parameters in a later step, thus averaging out uncertainty of individual gene parameters. https://github.com/ChristophH/sctransform/issues/25')


  list.features <- SelectIntegrationFeatures(object.list = seuratobject_list, nfeatures = 4000)

  if(length(seuratobject_list)>1) {
    seuratobject <- merge(seuratobject_list[[1]],
                          y = seuratobject_list[2:length(seuratobject_list)],
                          # project = "seuratobject",
                          merge.data = TRUE)

  } else seuratobject = seuratobject_list[[1]]

  VariableFeatures(seuratobject) <- list.features
  seuratobject
}

plot3clusterings = function(seuratobject, clustervar1 = 'SCT_snn_res.0.2', clustervar2 = 'SCT_snn_res.0.4', clustervar3 = 'SCT_snn_res.0.8') {
  # clustervar1 = 'SCT_snn_res.0.2'; clustervar2 = 'SCT_snn_res.0.4'; clustervar3 = 'SCT_snn_res.0.8'
  seuratobject_name = deparse(substitute(seuratobject))
  p1 = DimPlot(seuratobject, group.by = clustervar1, label = T)
  p2 = DimPlot(seuratobject, group.by = clustervar2, label = T)
  p3 = DimPlot(seuratobject, group.by = clustervar3, label = T)

  plot(p1+p2+p3 + patchwork::plot_annotation(title = seuratobject_name))
}


calcDoubletts <- function(seuratobject,
                          doSCT = T,  # was the seurat object preprocessed with SCT, see # maximal number of Pcs, see https://github.com/chris-mcginnis-ucsf/DoubletFinder
                          maxPC = 10, # maximal number of Pcs, see https://github.com/chris-mcginnis-ucsf/DoubletFinder
                          annotation_column = "SCT_snn_res.0.4" , # Clusternames

                          doublets_expected_fromLoading = NULL, # /CG000183_ChromiumSingleCell3__v3_UG_Rev_C.pdf
                          seed = 2712, # seed for reproduction
                          experimental_batchID = "run10x",
                          numberOfCores=1 ,# six is good, as there are six runs to explore parameter space
                          estimated_loading_doublets = estimated_loading_doublets # provide doublets, as the seuratobject is already filtered not including all cells anymore, typically # typically see  https://assets.ctfassets.net/an68im79xiti/4tjk4KvXzTWgTs8f3tvUjq/2259891d68c53693e753e1b45e42de2d
) {

  
  seuratobject_name = deparse(substitute(seuratobject))
  library(DoubletFinder) # remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')

  set.seed(seed)
  stopifnot(experimental_batchID %in% names(seuratobject@meta.data))
  message(Sys.time(), "...expecting '",experimental_batchID,"' as sub-experiment-identifyer...")
  mytable(seuratobject@meta.data[[experimental_batchID]])


  stopifnot("Not all Columns named 'run10x', 'estimated_doublettrate_proz'  found in  in parameter table 'estimated_loading_doublets'"=all(c('run10x', "estimated_doublettrate_proz") %in% names(estimated_loading_doublets)))


  stopifnot(annotation_column %in% names(seuratobject@meta.data))
  message(Sys.time(), "...using column '",annotation_column,"' for clustering...")
  orig.idents = unique(seuratobject@meta.data[[experimental_batchID]])
  message(paste0(Sys.time(), "...Running DoubletFinder for\n", paste(orig.idents, collapse = "\n")))

  stopifnot("not all sub-experiments found in parameter table 'estimated_loading_doublets'"= all(orig.idents %in% estimated_loading_doublets$run10x))
  # separate for each

  if("pANN" %in% names(seuratobject@meta.data)) seuratobject$pANN = NULL

  totalres = lapply(orig.idents, function(myident) {

    res = c()
    message(Sys.time(), "...=======================================================\nWorking on ", myident)

    subseurat  = seuratobject[,seuratobject@meta.data[[experimental_batchID]]== myident]
    subseurat


    # https://github.com/chris-mcginnis-ucsf/DoubletFinder

    ## pK Identification (no ground-truth) ---------------------------------------------------------------------------------------
    sweep.res.list_subseurat <- paramSweep_v3(subseurat, PCs = 1:maxPC, sct = doSCT,num.cores	=numberOfCores)
    sweep.stats_subseurat <- summarizeSweep(sweep.res.list_subseurat, GT = FALSE)
    bcmvn_subseurat <- find.pK(sweep.stats_subseurat)
    bcmvn_subseurat
    mypk = bcmvn_subseurat[bcmvn_subseurat$BCmetric==max(bcmvn_subseurat$BCmetric), "pK"] %>% as.character %>% as.numeric
    mypk
    message("Using pk of ",mypk)
    res$bcmvn = bcmvn_subseurat
    res$pk =mypk

    annotations <- subseurat@meta.data[,annotation_column]
    homotypic.prop <- modelHomotypic(annotations)       
    message("Using homotypic.prop of ",homotypic.prop)
    homotypic.prop


    estimated_doublettrate = estimated_loading_doublets[run10x==myident, estimated_doublettrate_proz]
    cellspresent = estimated_loading_doublets[run10x==myident, N]
    message(Sys.time(), "...using provided Doublett rate  providedtable in  parameter  'estimated_loading_doublets' from number of present cells per batch ", "(",cellspresent, " -> ca. ", round(estimated_doublettrate, 1), "%)")
    doublettrate = estimated_doublettrate /100


    nExp_poi <- round(doublettrate*nrow(subseurat@meta.data))

    nExp_poi
    nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))
    nExp_poi.adj

    res$nExp_poi = nExp_poi
    res$nExp_poi.adj = nExp_poi.adj

    message(Sys.time(), "...Running DoubletFinder with varying classification stringencies ----------------------------------------------------------------")
    # 28.9.22 as sometimes the same column name results from DF.classifications_notConsidHomoDoubl and DF.classifications_ConsidHomoDoubl I now use with subseurat1 and subseurat2 two objects to collect this information
   
    subseurat1 <- doubletFinder_v3(subseurat, PCs = 1:maxPC, pN = 0.25, pK = mypk, nExp = nExp_poi, reuse.pANN = FALSE, sct = doSCT)
    
    pann_name = grep("^pANN", names(subseurat1@meta.data), value = T)
    pann_name
    res$pann_name = pann_name
   
    subseurat2 <- doubletFinder_v3(subseurat1, PCs = 1:maxPC, pN = 0.25, pK = mypk, nExp = nExp_poi.adj, reuse.pANN = pann_name, sct = doSCT)
 
    subseurat_attrib = subseurat1@meta.data %>% as.data.table(.,keep.rownames = T)
    subseurat_attrib2 = subseurat2@meta.data %>% as.data.table(.,keep.rownames = T)

  
    DF_finalnames1 = grep("DF\\.classific", names(subseurat1@meta.data), value = T) %>% last()
    DF_finalnames1
    DF_finalnames2 = grep("DF\\.classific", names(subseurat2@meta.data), value = T) %>% last()
    DF_finalnames2


    subseurat_attrib[, DF.classifications_notConsidHomoDoubl := subseurat_attrib[match_hk(subseurat_attrib$rn, subseurat_attrib$rn), get(DF_finalnames1)]]
    subseurat_attrib[, DF.classifications_ConsidHomoDoubl := subseurat_attrib2[match_hk(subseurat_attrib$rn, subseurat_attrib2$rn), get(DF_finalnames2)]]


    subseurat_attrib[,.N, .(DF.classifications_notConsidHomoDoubl, DF.classifications_ConsidHomoDoubl)]
    subseurat_attrib[DF.classifications_notConsidHomoDoubl != DF.classifications_ConsidHomoDoubl,.N , get(annotation_column)]

    annodata_pre =  subseurat_attrib[,.N, .(get(annotation_column),DF.classifications_ConsidHomoDoubl)]
    names(annodata_pre)[names(annodata_pre)=="get"] = annotation_column
    annodata  = dcast.data.table(annodata_pre, get(annotation_column) ~ DF.classifications_ConsidHomoDoubl, value.var = "N", fill = 0)
    names(annodata)[names(annodata)=="annotation_column"] = annotation_column
    annodata[,proz_doublet := paste0((Doublet/(Doublet + Singlet)) %>% proz(.,stellen = 0), "\n(",Doublet, ")")]
    annodata2 = cbind(DF.classifications_ConsidHomoDoubl = "Doublet", annodata)

    p_bar = ggplot(subseurat_attrib, aes_string(x = annotation_column, fill = 'DF.classifications_ConsidHomoDoubl')) +
      geom_bar(position = "fill", alpha = 0.8) + scale_y_continuous(labels = label_percent(accuracy = 1), breaks = (0:10)/10) + theme_hc() +
      theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust = 1),
            legend.position = "top",
            axis.title.x = element_blank(),
            axis.title.y = element_blank(),
      ) +
      scale_fill_colorblind()+
      labs(fill = "")+
      geom_text(data =annodata2, aes_string(x = annotation_column, label = 'proz_doublet', y = 1.1), col = viridis_pal()(1), size =3) +
      ggtitle(paste(seuratobject_name , "-", myident), subtitle = 'DF.classifications_ConsidHomoDoubl')

    plot(p_bar)

    res$p_barplot = p_bar
    res$annotation= subseurat_attrib
    message(Sys.time(), "...DONE Doublet analysis for ", myident, "===================================================================================================================================================================================================================")
    res


  }
  )
  message(Sys.time(), "...Collecting Doublet results back into seurat object... ")
  names(totalres) = orig.idents
  


  doubletdf = lapply(totalres, function(x) {
    # x=totalres[[1]]
    setnames(x$annotation, grep("pANN", names(x$annotation), value = T), "pANN")
  }) %>% rbindlist(., fill = T) %>% .[,grep('DF\\.classifications_0', names(.), invert = T), with = F]

  doubletdf

  seuratobject$pANN = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),pANN]
  seuratobject$DF.classifications_notConsidHomoDoubl = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),DF.classifications_notConsidHomoDoubl]
  seuratobject$DF.classifications_ConsidHomoDoubl = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),DF.classifications_ConsidHomoDoubl]



  plot(DimPlot(seuratobject, group.by = 'DF.classifications_ConsidHomoDoubl', raster = F))

  seuratobject

}


```

# >AIM

Identify doubletts with additional software

# Human
## LOAD

```{r load}
if(exists('seurat')==F) seurat = readRDS(here(paste0("R/results/h212_2_human_decontx_dblt.RDS")))

```

## Doublets via DoubletFinder
### Define cellcycle genes
```{r}
s.genes = cc.genes$s.genes
g2m.genes = cc.genes$g2m.genes

qlist33 = venn3(s.genes, g2m.genes, rownames(seurat))
str(qlist33)

s.genes = qlist33$q2
s.genes%>% sort()

g2m.genes = qlist33$q3
g2m.genes %>% sort()

```

### Cluster
```{r}
seurat2 <- seurat %>% 
  doSCTransform(seuratobject = .,experimentIDcol = "run10x", variable.features.n = 4000,   vars.to.regress = "percent.mito",  method = "glmGamPoi", vst.flavor = "v2",) %>%
  CellCycleScoring(s.features = s.genes, g2m.features = g2m.genes,  assay = "SCT")   %>%
  RunPCA(features=VariableFeatures(.), assay = "SCT", npcs = 50,verbose=TRUE)%>%
  RunUMAP(dims=1:30,verbose=TRUE,  assay = "SCT" ) %>%
  FindNeighbors(dims=1:30, assay = "SCT", verbose=TRUE)  %>%
  FindClusters( resolution = 0.8) %>%
  FindClusters( resolution = 0.2) %>%
  FindClusters( resolution = 0.4)
seurat2
```

### plot Cluster
```{r}
plot3clusterings(seurat2)
```

### estimatin doublets from loading
as this is rhapsody, I assume 1 % as it is lower than 10x
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7770630/

```{r}
annocells = as.data.table(seurat2@meta.data)
  
  estimated_loading_doublets = annocells[,.(N=.N), run10x][order(run10x)]

  estimated_loading_doublets[, estimated_doublettrate_proz  := 1] 
  estimated_loading_doublets$reference = "For 10x data, should reflect loading acc. to https://assets.ctfassets.net/an68im79xiti/4tjk4KvXzTWgTs8f3tvUjq/2259891d68c53693e753e1b45e42de2d/CG000183_ChromiumSingleCell3__v3_UG_Rev_C.pdf here i guess 1 proz as it is less in bd rhapsody https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7770630/"
  
  
  
  
  WriteXLS_hk('estimated_loading_doublets', here("R/results/h215_2_human_estimated_loading_doublets.xlsx"))
  
  estimated_loading_doublets
  
```


### Calc DoubletFinder
```{r}
seurat3 =   calcDoubletts(seuratobject = seurat2,
                                     doSCT=T, # allthough objectwas already sctransformed, FALSE seem not to work
                                     annotation_column = "SCT_snn_res.0.4", # reasonable number of cluster, should roughly match number of cell types
                                     numberOfCores = 8,#  paramter space
                                     estimated_loading_doublets = estimated_loading_doublets # provide doublets, as the seuratobject is already filtered not including all cells anymore
) 



```

## plot doublets
```{r}
DimPlot(seurat3, group.by = 'DF.classifications_ConsidHomoDoubl')
```

# calc sc doublet finder
```{r}
sce <- as.SingleCellExperiment(seurat3, assay= "RNA")

sce_1promil <- scDblFinder(sce, samples="run10x", dbr = 0.001)
mytable(sce_1promil$scDblFinder.class)
 
sce_1proz_sd0 <- scDblFinder(sce, samples="run10x", dbr = 0.01, dbr.sd = 0)
mytable(sce_1proz_sd0$scDblFinder.class)
 

sce_attrib_1promil = sce_1promil@colData %>% as.data.table(keep.rownames = T)

resi_1promil = sce_attrib_1promil[, . (rn, scDblFinder.sample, scDblFinder.class, scDblFinder.score, scDblFinder.weighted, scDblFinder.cxds_score)] # in particular 'scDblFinder.score' (the final score used) and 'scDblFinder.class' (whether the cell is called as 'doublet' or 'singlet').

seurat3$scDblFinder.score_3proz = resi_1promil[match_hk(colnames(seurat3), resi_1promil$rn), scDblFinder.score]
seurat3$scDblFinder.class_3proz = resi_1promil[match_hk(colnames(seurat3), resi_1promil$rn), scDblFinder.class]




sce_attrib_1proz = sce_1proz_sd0@colData %>% as.data.table(keep.rownames = T)

resi_1proz = sce_attrib_1proz[, . (rn, scDblFinder.sample, scDblFinder.class, scDblFinder.score, scDblFinder.weighted, scDblFinder.cxds_score)] # in particular 'scDblFinder.score' (the final score used) and 'scDblFinder.class' (whether the cell is called as 'doublet' or 'singlet').

seurat3$scDblFinder.score_1proz = resi_1proz[match_hk(colnames(seurat3), resi_1proz$rn), scDblFinder.score]
seurat3$scDblFinder.class_1proz = resi_1proz[match_hk(colnames(seurat3), resi_1proz$rn), scDblFinder.class]


```



# SAVE

```{r saving}
cellanno = seurat3@meta.data %>% as.data.table(keep.rownames = T)
cellanno
fwrite(cellanno, file = here("R/results/h215_2_human_DoubletFinder.txt.gz"))
saveRDS(seurat3, here("R/results/h215_2_human_DoubletFinder.rds"))
```



# finalize

```{r}
finalizeSkript()

```

## R version 4.2.2 (2022-10-31)
## Platform: x86_64-suse-linux-gnu (64-bit)
## Running under: openSUSE Leap 15.3
## 
## Matrix products: default
## BLAS:   /usr/lib64/R/lib/libRblas.so
## LAPACK: /usr/lib64/R/lib/libRlapack.so
## 
## Random number generation:
##  RNG:     L'Ecuyer-CMRG 
##  Normal:  Inversion 
##  Sample:  Rounding 
##  
## locale:
##  [1] LC_CTYPE=de_DE.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=de_DE.UTF-8    
##  [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=de_DE.UTF-8   
##  [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] parallel  stats4    stats     graphics  grDevices utils     datasets 
## [8] methods   base     
## 
## other attached packages:
##  [1] sctransform_0.3.5           ROCR_1.0-11                
##  [3] KernSmooth_2.23-20          fields_14.1                
##  [5] viridis_0.6.2               viridisLite_0.4.1          
##  [7] spam_2.9-1                  DoubletFinder_2.0.3        
##  [9] future_1.32.0               scDblFinder_1.13.12        
## [11] SingleCellExperiment_1.18.0 SummarizedExperiment_1.26.1
## [13] Biobase_2.56.0              GenomicRanges_1.48.0       
## [15] GenomeInfoDb_1.32.3         IRanges_2.30.1             
## [17] S4Vectors_0.34.0            BiocGenerics_0.42.0        
## [19] MatrixGenerics_1.8.1        matrixStats_0.63.0         
## [21] sva_3.44.0                  BiocParallel_1.30.4        
## [23] genefilter_1.78.0           mgcv_1.8-40                
## [25] nlme_3.1-159                ggthemes_4.2.4             
## [27] ggplot2_3.4.2               here_1.0.1                 
## [29] toolboxH_0.2.17             eulerr_6.1.1               
## [31] testthat_3.1.4              stringr_1.5.0              
## [33] scales_1.2.1                readxl_1.4.1               
## [35] RColorBrewer_1.1-3          png_0.1-8                  
## [37] fdrtool_1.2.17              R.utils_2.12.0             
## [39] R.oo_1.25.0                 R.methodsS3_1.8.2          
## [41] data.table_1.14.8           SeuratWrappers_0.3.1       
## [43] Seurat_4.9.9.9042           SeuratObject_4.9.9.9084    
## [45] sp_1.6-0                   
## 
## loaded via a namespace (and not attached):
##   [1] rtracklayer_1.56.1        scattermore_1.0          
##   [3] tidyr_1.3.0               bit64_4.0.5              
##   [5] knitr_1.42                irlba_2.3.5.1            
##   [7] DelayedArray_0.22.0       KEGGREST_1.36.3          
##   [9] RCurl_1.98-1.8            generics_0.1.3           
##  [11] ScaledMatrix_1.4.0        cowplot_1.1.1            
##  [13] RSQLite_2.2.16            RANN_2.6.1               
##  [15] bit_4.0.5                 spatstat.data_3.0-1      
##  [17] httpuv_1.6.9              xfun_0.38                
##  [19] jquerylib_0.1.4           evaluate_0.20            
##  [21] promises_1.2.0.1          fansi_1.0.4              
##  [23] restfulr_0.0.15           igraph_1.4.1             
##  [25] DBI_1.1.3                 htmlwidgets_1.6.2        
##  [27] spatstat.geom_3.1-0       purrr_1.0.1              
##  [29] ellipsis_0.3.2            RSpectra_0.16-1          
##  [31] dplyr_1.1.1               annotate_1.74.0          
##  [33] deldir_1.0-6              sparseMatrixStats_1.8.0  
##  [35] vctrs_0.6.1               remotes_2.4.2            
##  [37] abind_1.4-5               cachem_1.0.7             
##  [39] withr_2.5.0               progressr_0.13.0         
##  [41] GenomicAlignments_1.32.1  scran_1.24.0             
##  [43] goftest_1.2-3             cluster_2.1.4            
##  [45] dotCall64_1.0-2           lazyeval_0.2.2           
##  [47] crayon_1.5.2              spatstat.explore_3.1-0   
##  [49] labeling_0.4.2            edgeR_3.38.4             
##  [51] pkgconfig_2.0.3           vipor_0.4.5              
##  [53] rlang_1.1.0               globals_0.16.2           
##  [55] lifecycle_1.0.3           miniUI_0.1.1.1           
##  [57] fastDummies_1.6.3         rsvd_1.0.5               
##  [59] cellranger_1.1.0          rprojroot_2.0.3          
##  [61] polyclip_1.10-4           RcppHNSW_0.4.1           
##  [63] lmtest_0.9-40             Matrix_1.5-3             
##  [65] zoo_1.8-11                beeswarm_0.4.0           
##  [67] ggridges_0.5.4            rjson_0.2.21             
##  [69] bitops_1.0-7              Biostrings_2.64.1        
##  [71] blob_1.2.3                DelayedMatrixStats_1.18.2
##  [73] parallelly_1.35.0         spatstat.random_3.1-4    
##  [75] beachmat_2.12.0           memoise_2.0.1            
##  [77] magrittr_2.0.3            plyr_1.8.8               
##  [79] ica_1.0-3                 zlibbioc_1.42.0          
##  [81] compiler_4.2.2            dqrng_0.3.0              
##  [83] BiocIO_1.6.0              fitdistrplus_1.1-8       
##  [85] Rsamtools_2.12.0          cli_3.6.1                
##  [87] XVector_0.36.0            listenv_0.9.0            
##  [89] patchwork_1.1.2           pbapply_1.7-0            
##  [91] MASS_7.3-58.1             tidyselect_1.2.0         
##  [93] stringi_1.7.12            glmGamPoi_1.8.0          
##  [95] highr_0.10                yaml_2.3.7               
##  [97] BiocSingular_1.12.0       locfit_1.5-9.6           
##  [99] ggrepel_0.9.3             grid_4.2.2               
## [101] sass_0.4.5                tools_4.2.2              
## [103] future.apply_1.10.0       bluster_1.6.0            
## [105] metapod_1.4.0             gridExtra_2.3            
## [107] farver_2.1.1              Rtsne_0.16               
## [109] digest_0.6.31             BiocManager_1.30.20      
## [111] shiny_1.7.4               Rcpp_1.0.10              
## [113] scuttle_1.6.3             later_1.3.0              
## [115] WriteXLS_6.4.0            RcppAnnoy_0.0.20         
## [117] httr_1.4.5                AnnotationDbi_1.58.0     
## [119] colorspace_2.1-0          brio_1.1.3               
## [121] XML_3.99-0.10             tensor_1.5               
## [123] reticulate_1.28           splines_4.2.2            
## [125] uwot_0.1.14               statmod_1.4.37           
## [127] spatstat.utils_3.0-2      scater_1.24.0            
## [129] xgboost_1.7.5.1           plotly_4.10.1            
## [131] xtable_1.8-4              jsonlite_1.8.4           
## [133] R6_2.5.1                  pillar_1.9.0             
## [135] htmltools_0.5.5           mime_0.12                
## [137] glue_1.6.2                fastmap_1.1.1            
## [139] BiocNeighbors_1.14.0      codetools_0.2-18         
## [141] maps_3.4.0                utf8_1.2.3               
## [143] lattice_0.20-45           bslib_0.4.2              
## [145] spatstat.sparse_3.0-1     tibble_3.2.1             
## [147] ggbeeswarm_0.7.1          leiden_0.4.3             
## [149] survival_3.4-0            limma_3.52.3             
## [151] rmarkdown_2.21            munsell_0.5.0            
## [153] GenomeInfoDbData_1.2.8    reshape2_1.4.4           
## [155] gtable_0.3.3
