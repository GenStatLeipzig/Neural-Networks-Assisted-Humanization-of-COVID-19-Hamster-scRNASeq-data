---
title: "h212_2_backround_correct_doubletten_clustern_human.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# >INITITATE

```{r}

#' # INITIIEREN ####
rm(list = setdiff(ls(), ""))
.libPaths("~/rpackages/angmar/")
.libPaths()
 
library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(BiocParallel)
library(scDblFinder)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

correctAmbientRNA_noEmptyCells = function(seuratobject,  ribogenes=NULL, mitogenes=NULL ,
                                          orthologue_genenames = NULL, # if mitogenes or ribogenes are provided than  if also providing orthologue_genenames, percentage of ribogenes and mitogenes relates to orthologue_genenames also included in the seuratobject, only
                                          beVerbose = F ,
                                          min.cells_afterCorrection = 1, #min.cells  Include features detected in at least this many cells. Will subset the counts matrix as well. To reintroduce excluded features, create a new object with a lower cutoff after bg correction
                                          min.features_afterCorrection = 1, ##Include cells where at least this many features are detected.
                                          batch_var4plot = "run10x") {


  seuratobject_name = deparse(substitute(seuratobject))

  require(celda)
  require(SingleCellExperiment)
  seuratobject_sce = as.SingleCellExperiment(seuratobject)

  # run decontX with empty droplets
  message(Sys.time(), '...Running decontX')

  seuratobject_sce <- decontX(seuratobject_sce, verbose = beVerbose)


  message(Sys.time(), ' ...complete')
  umap <- reducedDim(seuratobject_sce, "decontX_UMAP")

  seuratobject$batch_var4plot = seuratobject@meta.data[[batch_var4plot]]
  plot(plotDimReduceCluster(x = seuratobject_sce$decontX_clusters,
                            dim1 = umap[, 1], dim2 = umap[, 2]) +ggtitle(seuratobject_name, subtitle = unique(seuratobject$batch_var4plot)))

  plot( plotDecontXContamination(seuratobject_sce)  +ggtitle(seuratobject_name, subtitle = unique(seuratobject$batch_var4plot)))

  message(Sys.time(), "...Recreating Seurat object")
  message(Sys.time(), ' ...removing when recreating Seurat object droplets that have less or equal ',min.features_afterCorrection,' expression counts and  removing genes expressed in less than ',min.cells_afterCorrection,' cells')

  seuratobject_decontx_nobg =  CreateSeuratObject(counts = seuratobject_sce@assays@data$decontXcounts %>% round(),
                                                  min.features = min.features_afterCorrection,
                                                  min.cells = min.cells_afterCorrection)


  qlist65 = venn2(names(seuratobject@meta.data), names(seuratobject_decontx_nobg@meta.data), plotte = beVerbose, mylabels = c("provided\nseuratobject", "recreated\nseuratobject"), mytitle = "Attributes overlap prior\nadding them to the recreated seuratobject")



  for(attribnames in qlist65$q2) {
    # attribnames = qlist65$q2[1]
    message(Sys.time(), "...trying to add original column (via barcode ID) '", attribnames, "'")
    seuratobject_decontx_nobg$addedatrib = seuratobject@meta.data[match_hk(colnames(seuratobject_decontx_nobg) , colnames(seuratobject)),attribnames]
    setnames(seuratobject_decontx_nobg@meta.data, "addedatrib", attribnames)
  }


  ##################################
  # add decont results
  seuratobject_sce$decontX_umap1 = umap[, 1]
  seuratobject_sce$decontX_umap2 = umap[, 2]

  toadd = c('decontX_umap1', 'decontX_umap2', 'decontX_clusters', 'decontX_contamination')


  for(attribnames2 in toadd) {
    message(Sys.time(), "...trying to add DecontX results (via barcode ID) '", attribnames2, "'")

    seuratobject_decontx_nobg$addedatrib = seuratobject_sce@colData[match_hk(colnames(seuratobject_decontx_nobg) , colnames(seuratobject_sce)),attribnames2]

    setnames(seuratobject_decontx_nobg@meta.data, "addedatrib", attribnames2)
  }



  if(is.null(mitogenes)==F){
    message(Sys.time(), "...recalculating pct.mito")
    mitogenes_present = mitogenes[mitogenes %in% rownames(seuratobject_decontx_nobg)]
    message(Sys.time(), "...using for recalculation pct.mito genes ", paste(sort(mitogenes_present), collapse = ", "))

    if(is.null(orthologue_genenames) ==T) seuratobject_decontx_nobg$pct.mito <- PercentageFeatureSet(seuratobject_decontx_nobg,features = mitogenes_present) else seuratobject_decontx_nobg$pct.mito <- PercentageFeatureSet(seuratobject_decontx_nobg[rownames(seuratobject_decontx_nobg) %in% orthologue_genenames,],features = mitogenes_present)
  }

  if(is.null(ribogenes)==F) {
    message(Sys.time(), "...recalculating pct.ribo")
    ribogenes_present = ribogenes[ribogenes %in% rownames(seuratobject_decontx_nobg)]
    message(Sys.time(), "...using for recalculation pct.mito genes ", paste(sort(ribogenes_present), collapse = ", "))

    if(is.null(orthologue_genenames) ==T) seuratobject_decontx_nobg$pct.ribo =  PercentageFeatureSet(seuratobject_decontx_nobg, features = ribogenes_present) else seuratobject_decontx_nobg$pct.ribo =  PercentageFeatureSet(seuratobject_decontx_nobg[rownames(seuratobject_decontx_nobg) %in% orthologue_genenames,], features = ribogenes_present)
  }


  seuratobject_decontx_nobg
}

```

# >AIM

Background correct i.e. ambient RNA correction

# Human
## LOAD

```{r load}
human = readRDS(here(paste0("R/results/h210_1_human_wb_rhaps_combat.rds")))
```

## Ambient RNA background correction without available emptydroplet data

```{r}
human$orig.ident %>% mytable()
human$run10x = human$orig.ident

packageVersion("Matrix")

human_decontx_list = SplitObject(
  object = human,
  # object = human[, human$orig.ident==human$orig.ident[1]],
  split.by = "orig.ident") %>%   lapply(., function(x) correctAmbientRNA_noEmptyCells(seuratobject = x,
                                                                                      beVerbose=T,
                                                                                          min.cells_afterCorrection = 3, # as it is per batch
                                                                                      min.features_afterCorrection = 200))

human_decontx = merge(human_decontx_list[[1]],y = human_decontx_list[2:length(human_decontx_list)], merge.data = TRUE)

human_decontx
```

## Doublet Detection
### calc
```{r}


  sce <- as.SingleCellExperiment(human_decontx, assay= "RNA")
sce$run10x %>% table()
sce <- scDblFinder(sce, samples="run10x")
table(sce$scDblFinder.class)

```

### add to seurat
```{r}
table(sce$scDblFinder.class)
sce$ident %>% table()

sce_attrib = sce@colData %>% as.data.table(keep.rownames = T)

resi = sce_attrib[, . (rn, scDblFinder.sample, scDblFinder.class, scDblFinder.score, scDblFinder.weighted, scDblFinder.cxds_score)] # in particular 'scDblFinder.score' (the final score used) and 'scDblFinder.class' (whether the cell is called as 'doublet' or 'singlet').
resi[, boxplot(scDblFinder.score~scDblFinder.class)$x]

human_decontx$scDblFinder.score = resi[match_hk(colnames(human_decontx), resi$rn), scDblFinder.score]
human_decontx$scDblFinder.class = resi[match_hk(colnames(human_decontx), resi$rn), scDblFinder.class]


```




# SAVE

```{r saving}
saveRDS(human_decontx, file = here("R/results/h212_2_human_decontx_dblt.RDS"))
```



# finalize

```{r}
finalizeSkript()

```

