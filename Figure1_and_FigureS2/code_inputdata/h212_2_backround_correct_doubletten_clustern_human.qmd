---
title: "h212_2_backround_correct_doubletten_clustern_human.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# >INITITATE

```{r}

#' # INITIIEREN ####
rm(list = setdiff(ls(), ""))
.libPaths("~/rpackages/angmar/")
.libPaths()
 
library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(BiocParallel)
library(scDblFinder)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

correctAmbientRNA_noEmptyCells = function(seuratobject,  ribogenes=NULL, mitogenes=NULL ,
                                          orthologue_genenames = NULL, # if mitogenes or ribogenes are provided than  if also providing orthologue_genenames, percentage of ribogenes and mitogenes relates to orthologue_genenames also included in the seuratobject, only
                                          beVerbose = F ,
                                          min.cells_afterCorrection = 1, #min.cells  Include features detected in at least this many cells. Will subset the counts matrix as well. To reintroduce excluded features, create a new object with a lower cutoff after bg correction
                                          min.features_afterCorrection = 1, ##Include cells where at least this many features are detected.
                                          batch_var4plot = "run10x") {


  seuratobject_name = deparse(substitute(seuratobject))

  require(celda)
  require(SingleCellExperiment)
  seuratobject_sce = as.SingleCellExperiment(seuratobject)

  # run decontX with empty droplets
  message(Sys.time(), '...Running decontX')

  seuratobject_sce <- decontX(seuratobject_sce, verbose = beVerbose)


  message(Sys.time(), ' ...complete')
  umap <- reducedDim(seuratobject_sce, "decontX_UMAP")

  seuratobject$batch_var4plot = seuratobject@meta.data[[batch_var4plot]]
  plot(plotDimReduceCluster(x = seuratobject_sce$decontX_clusters,
                            dim1 = umap[, 1], dim2 = umap[, 2]) +ggtitle(seuratobject_name, subtitle = unique(seuratobject$batch_var4plot)))

  plot( plotDecontXContamination(seuratobject_sce)  +ggtitle(seuratobject_name, subtitle = unique(seuratobject$batch_var4plot)))

  message(Sys.time(), "...Recreating Seurat object")
  message(Sys.time(), ' ...removing when recreating Seurat object droplets that have less or equal ',min.features_afterCorrection,' expression counts and  removing genes expressed in less than ',min.cells_afterCorrection,' cells')

  seuratobject_decontx_nobg =  CreateSeuratObject(counts = seuratobject_sce@assays@data$decontXcounts %>% round(),
                                                  min.features = min.features_afterCorrection,
                                                  min.cells = min.cells_afterCorrection)


  qlist65 = venn2(names(seuratobject@meta.data), names(seuratobject_decontx_nobg@meta.data), plotte = beVerbose, mylabels = c("provided\nseuratobject", "recreated\nseuratobject"), mytitle = "Attributes overlap prior\nadding them to the recreated seuratobject")



  for(attribnames in qlist65$q2) {
    # attribnames = qlist65$q2[1]
    message(Sys.time(), "...trying to add original column (via barcode ID) '", attribnames, "'")
    seuratobject_decontx_nobg$addedatrib = seuratobject@meta.data[match_hk(colnames(seuratobject_decontx_nobg) , colnames(seuratobject)),attribnames]
    setnames(seuratobject_decontx_nobg@meta.data, "addedatrib", attribnames)
  }


  ##################################
  # add decont results
  seuratobject_sce$decontX_umap1 = umap[, 1]
  seuratobject_sce$decontX_umap2 = umap[, 2]

  toadd = c('decontX_umap1', 'decontX_umap2', 'decontX_clusters', 'decontX_contamination')


  for(attribnames2 in toadd) {
    message(Sys.time(), "...trying to add DecontX results (via barcode ID) '", attribnames2, "'")

    seuratobject_decontx_nobg$addedatrib = seuratobject_sce@colData[match_hk(colnames(seuratobject_decontx_nobg) , colnames(seuratobject_sce)),attribnames2]

    setnames(seuratobject_decontx_nobg@meta.data, "addedatrib", attribnames2)
  }



  if(is.null(mitogenes)==F){
    message(Sys.time(), "...recalculating pct.mito")
    mitogenes_present = mitogenes[mitogenes %in% rownames(seuratobject_decontx_nobg)]
    message(Sys.time(), "...using for recalculation pct.mito genes ", paste(sort(mitogenes_present), collapse = ", "))

    if(is.null(orthologue_genenames) ==T) seuratobject_decontx_nobg$pct.mito <- PercentageFeatureSet(seuratobject_decontx_nobg,features = mitogenes_present) else seuratobject_decontx_nobg$pct.mito <- PercentageFeatureSet(seuratobject_decontx_nobg[rownames(seuratobject_decontx_nobg) %in% orthologue_genenames,],features = mitogenes_present)
  }

  if(is.null(ribogenes)==F) {
    message(Sys.time(), "...recalculating pct.ribo")
    ribogenes_present = ribogenes[ribogenes %in% rownames(seuratobject_decontx_nobg)]
    message(Sys.time(), "...using for recalculation pct.mito genes ", paste(sort(ribogenes_present), collapse = ", "))

    if(is.null(orthologue_genenames) ==T) seuratobject_decontx_nobg$pct.ribo =  PercentageFeatureSet(seuratobject_decontx_nobg, features = ribogenes_present) else seuratobject_decontx_nobg$pct.ribo =  PercentageFeatureSet(seuratobject_decontx_nobg[rownames(seuratobject_decontx_nobg) %in% orthologue_genenames,], features = ribogenes_present)
  }


  seuratobject_decontx_nobg
}

```

# >AIM

Background correct i.e. ambient RNA correction

# Human
## LOAD

```{r load}
human = readRDS(here(paste0("R/results/h210_1_human_wb_rhaps_combat.rds")))
```

## Ambient RNA background correction without available emptydroplet data

```{r}
human$orig.ident %>% mytable()
human$run10x = human$orig.ident

packageVersion("Matrix")

human_decontx_list = SplitObject(
  object = human,
  # object = human[, human$orig.ident==human$orig.ident[1]],
  split.by = "orig.ident") %>%   lapply(., function(x) correctAmbientRNA_noEmptyCells(seuratobject = x,
                                                                                      beVerbose=T,
                                                                                          min.cells_afterCorrection = 3, # as it is per batch
                                                                                      min.features_afterCorrection = 200))

human_decontx = merge(human_decontx_list[[1]],y = human_decontx_list[2:length(human_decontx_list)], merge.data = TRUE)

human_decontx
```

## Doublet Detection
### calc
```{r}


  sce <- as.SingleCellExperiment(human_decontx, assay= "RNA")
sce$run10x %>% table()
sce <- scDblFinder(sce, samples="run10x")
table(sce$scDblFinder.class)

```

### add to seurat
```{r}
table(sce$scDblFinder.class)
sce$ident %>% table()

sce_attrib = sce@colData %>% as.data.table(keep.rownames = T)

resi = sce_attrib[, . (rn, scDblFinder.sample, scDblFinder.class, scDblFinder.score, scDblFinder.weighted, scDblFinder.cxds_score)] # in particular 'scDblFinder.score' (the final score used) and 'scDblFinder.class' (whether the cell is called as 'doublet' or 'singlet').
resi[, boxplot(scDblFinder.score~scDblFinder.class)$x]

human_decontx$scDblFinder.score = resi[match_hk(colnames(human_decontx), resi$rn), scDblFinder.score]
human_decontx$scDblFinder.class = resi[match_hk(colnames(human_decontx), resi$rn), scDblFinder.class]


```




# SAVE

```{r saving}
saveRDS(human_decontx, file = here("R/results/h212_2_human_decontx_dblt.RDS"))
```



# finalize

```{r}
finalizeSkript()

```



Session Info::
R version 4.2.2 (2022-10-31)
Platform: x86_64-suse-linux-gnu (64-bit)
Running under: openSUSE Leap 15.3

Matrix products: default
BLAS:   /usr/lib64/R/lib/libRblas.so
LAPACK: /usr/lib64/R/lib/libRlapack.so

Random number generation:
 RNG:     L'Ecuyer-CMRG 
 Normal:  Inversion 
 Sample:  Rejection 
 
locale:
 [1] LC_CTYPE=de_DE.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=de_DE.UTF-8    
 [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=de_DE.UTF-8   
 [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] celda_1.12.0                Matrix_1.5-3               
 [3] future_1.32.0               scDblFinder_1.13.12        
 [5] SingleCellExperiment_1.18.0 SummarizedExperiment_1.26.1
 [7] Biobase_2.56.0              GenomicRanges_1.48.0       
 [9] GenomeInfoDb_1.32.3         IRanges_2.30.1             
[11] S4Vectors_0.34.0            BiocGenerics_0.42.0        
[13] MatrixGenerics_1.8.1        matrixStats_0.63.0         
[15] sva_3.44.0                  BiocParallel_1.30.4        
[17] genefilter_1.78.0           mgcv_1.8-40                
[19] nlme_3.1-159                ggplot2_3.4.1              
[21] here_1.0.1                  SeuratWrappers_0.3.1       
[23] SeuratObject_4.1.3          Seurat_4.3.0               
[25] toolboxH_0.2.17             eulerr_6.1.1               
[27] testthat_3.1.4              stringr_1.5.0              
[29] scales_1.2.1                readxl_1.4.1               
[31] RColorBrewer_1.1-3          png_0.1-8                  
[33] fdrtool_1.2.17              R.utils_2.12.0             
[35] R.oo_1.25.0                 R.methodsS3_1.8.2          
[37] data.table_1.14.8          

loaded via a namespace (and not attached):
  [1] MCMCprecision_0.4.0        rtracklayer_1.56.1        
  [3] scattermore_1.0            tidyr_1.3.0               
  [5] bit64_4.0.5                knitr_1.39                
  [7] irlba_2.3.5.1              DelayedArray_0.22.0       
  [9] KEGGREST_1.36.3            RCurl_1.98-1.8            
 [11] doParallel_1.0.17          generics_0.1.3            
 [13] ScaledMatrix_1.4.0         cowplot_1.1.1             
 [15] RSQLite_2.2.16             RANN_2.6.1                
 [17] combinat_0.0-8             bit_4.0.5                 
 [19] spatstat.data_3.0-0        httpuv_1.6.9              
 [21] assertthat_0.2.1           viridis_0.6.2             
 [23] xfun_0.31                  evaluate_0.15             
 [25] promises_1.2.0.1           fansi_1.0.4               
 [27] restfulr_0.0.15            assertive.files_0.0-2     
 [29] igraph_1.4.1               DBI_1.1.3                 
 [31] htmlwidgets_1.6.1          spatstat.geom_3.0-6       
 [33] purrr_1.0.1                ellipsis_0.3.2            
 [35] dplyr_1.0.10               annotate_1.74.0           
 [37] deldir_1.0-6               sparseMatrixStats_1.8.0   
 [39] vctrs_0.5.2                remotes_2.4.2             
 [41] ROCR_1.0-11                abind_1.4-5               
 [43] cachem_1.0.7               RcppEigen_0.3.3.9.3       
 [45] withr_2.5.0                progressr_0.13.0          
 [47] sctransform_0.3.5          GenomicAlignments_1.32.1  
 [49] scran_1.24.0               goftest_1.2-3             
 [51] cluster_2.1.4              lazyeval_0.2.2            
 [53] crayon_1.5.2               spatstat.explore_3.0-6    
 [55] labeling_0.4.2             edgeR_3.38.4              
 [57] pkgconfig_2.0.3            vipor_0.4.5               
 [59] rlang_1.0.6                globals_0.16.2            
 [61] lifecycle_1.0.3            miniUI_0.1.1.1            
 [63] dbscan_1.1-11              enrichR_3.1               
 [65] rsvd_1.0.5                 cellranger_1.1.0          
 [67] rprojroot_2.0.3            polyclip_1.10-4           
 [69] lmtest_0.9-40              zoo_1.8-11                
 [71] beeswarm_0.4.0             ggridges_0.5.4            
 [73] viridisLite_0.4.1          rjson_0.2.21              
 [75] bitops_1.0-7               KernSmooth_2.23-20        
 [77] Biostrings_2.64.1          blob_1.2.3                
 [79] DelayedMatrixStats_1.18.2  parallelly_1.35.0         
 [81] spatstat.random_3.1-3      gridGraphics_0.5-1        
 [83] beachmat_2.12.0            memoise_2.0.1             
 [85] magrittr_2.0.3             plyr_1.8.8                
 [87] ica_1.0-3                  zlibbioc_1.42.0           
 [89] compiler_4.2.2             dqrng_0.3.0               
 [91] BiocIO_1.6.0               fitdistrplus_1.1-8        
 [93] Rsamtools_2.12.0           cli_3.6.0                 
 [95] XVector_0.36.0             listenv_0.9.0             
 [97] patchwork_1.1.2            pbapply_1.7-0             
 [99] MASS_7.3-58.1              tidyselect_1.2.0          
[101] stringi_1.7.12             yaml_2.3.5                
[103] BiocSingular_1.12.0        assertive.numbers_0.0-2   
[105] locfit_1.5-9.6             ggrepel_0.9.3             
[107] grid_4.2.2                 tools_4.2.2               
[109] future.apply_1.10.0        parallel_4.2.2            
[111] bluster_1.6.0              foreach_1.5.2             
[113] metapod_1.4.0              gridExtra_2.3             
[115] farver_2.1.1               assertive.types_0.0-3     
[117] Rtsne_0.16                 digest_0.6.31             
[119] BiocManager_1.30.20        FNN_1.1.3.2               
[121] shiny_1.7.4                Rcpp_1.0.10               
[123] scuttle_1.6.3              later_1.3.0               
[125] RcppAnnoy_0.0.20           httr_1.4.5                
[127] AnnotationDbi_1.58.0       assertive.properties_0.0-5
[129] colorspace_2.1-0           brio_1.1.3                
[131] XML_3.99-0.10              tensor_1.5                
[133] reticulate_1.28            splines_4.2.2             
[135] uwot_0.1.14                statmod_1.4.37            
[137] spatstat.utils_3.0-1       scater_1.24.0             
[139] sp_1.6-0                   xgboost_1.7.5.1           
[141] plotly_4.10.1              xtable_1.8-4              
[143] jsonlite_1.8.4             assertive.base_0.0-9      
[145] R6_2.5.1                   pillar_1.9.0              
[147] htmltools_0.5.4            mime_0.12                 
[149] glue_1.6.2                 fastmap_1.1.0             
[151] BiocNeighbors_1.14.0       codetools_0.2-18          
[153] utf8_1.2.3                 lattice_0.20-45           
[155] spatstat.sparse_3.0-0      tibble_3.2.1              
[157] multipanelfigure_2.1.2     curl_5.0.0                
[159] ggbeeswarm_0.7.1           leiden_0.4.3              
[161] magick_2.7.3               survival_3.4-0            
[163] limma_3.52.3               rmarkdown_2.14            
[165] munsell_0.5.0              GenomeInfoDbData_1.2.8    
[167] iterators_1.0.14           reshape2_1.4.4            
[169] gtable_0.3.1  
