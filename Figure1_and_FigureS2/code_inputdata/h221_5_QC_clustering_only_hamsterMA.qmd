---
title: "h221_5_QC_clustering_only_hamsterMA"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r results='hide', message=FALSE}

#' # INITIIEREN #### 
set.seed(192) 
.libPaths() 

library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(patchwork)
library(BiocParallel)
library(scDblFinder)
library(pander)
  require(ggsankey)
  require(ggrepel)

  require(dplyr)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)
 
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# AIM

QC including qC cluster definition per species incl. all data genes.

# Dataimport

First, we imported the data from the public data (`seu_blood_new_combined_integrated_annotated.rds`).

```{r results='hide'}
fn = here("R/data/seu_blood_new_combined_integrated_annotated.rds")
# file.exists(fn)
seurat_provided = readRDS(fn)
cellanno_pre0 = seurat_provided@meta.data %>% as.data.table()

dim(seurat_provided@assays$RNA$counts)
rowsummen_RNAcounts = seurat_provided@assays$RNA$counts %>% rowSums()
min(rowsummen_RNAcounts)

dim(seurat_provided@assays$RNA$data)
rowsummen_RNAdata = seurat_provided@assays$RNA$data %>% rowSums()
min(rowsummen_RNAdata)

(rowsummen_RNAcounts>2) %>% table()
(rowsummen_RNAdata>2) %>% table()
 


```

The file was already QCed with minimal number of RNA features `r min(seurat_provided$nFeature_RNA)`, minimal number of cellwise counts `r min(seurat_provided$nCount_RNA)`. No information on mitochondrial RNA was provided.

Dimensions of the file were `r dim(seurat_provided) %>% paste(collapse = " x ")` features x cells (SCT slot) and `r dim(seurat_provided@assays$RNA@data) %>% paste(collapse = " x ")` features x cells (RNA slot)
# Filter to whole blood data

The data was already whole blood data, no filtering required


# Batch correction

We did not do batch correction with the data, as batches and severity (days of infections) were identical.

```{r}
seurat_provided$orig.ident %>% table() %>% sort()
```

# BAckground correction 

We used packages DropletUtils 1.16.0 `r #packageVersion('DropletUtils')` and celda 1.12.0 `r #packageVersion('celda')` to do background correction of ambient RNA

Thereby, we slightly modified standard settings, by applying a basic filter allowing only genes expressed in 3 cells and cells with at least 200 features for the background-corrected data.

# Doublet definition

Furthermore, we calculated batch-wise doublets applying package scDblFinder_1.13.12 and DoubletFinder_2.0. For the latter, we used cluster level `SCT_snn_res.0.4`. The assumed doublet rate for 10x data in both methods is roughly 1% per each of 1000 cells. 

```{r results='hide'}
seurat = readRDS( here("R/results/h218_3_hamsterMA_DoubletFinder.rds"))
seurat


seurat$dbl_doubletfinder = ifelse(seurat$DF.classifications_ConsidHomoDoubl=="Doublet", "doublet",
                                  ifelse(seurat$DF.classifications_ConsidHomoDoubl =="Singlet", "singlet", seurat$DF.classifications_ConsidHomoDoubl))
seurat$dbl_doubletfinder_num = as.numeric(seurat$dbl_doubletfinder=="doublet")
seurat$dbl_doubletfinder_num %>% mytable

seurat$scDblFinder.class %>% mytable()

seurat$dbl_scDblFinder_num = as.numeric(seurat$scDblFinder.class=="doublet")
seurat$dbl_scDblFinder_num %>% mytable

seurat$dbl_doubletsum = seurat$dbl_doubletfinder_num + seurat$dbl_scDblFinder_num 
seurat$dbl_doubletsum %>% mytable

seurat$dbl_doubletsumgr0 = seurat$dbl_doubletsum>0

cellannopre2 = seurat@meta.data %>% data.table(keep.rownames = T)
```

Correspondence of sc doublet finder and doublet finder was moderate.

#### dbl_doubletfinder:
```{r }
seurat$dbl_doubletfinder %>% mytable
```

####dbl_scDblFinder:
```{r }
seurat$dbl_scDblFinder_num %>% mytable
```

#### both:
```{r }
seurat$dbl_doubletsum %>% mytable

qlist11 = venn2(cellannopre2[dbl_doubletfinder=="doublet", rn],
                cellannopre2[scDblFinder.class=="doublet", rn],
                
                mylabels = c("dbl finder", "sc dbl finder")
)

```

Quantitative score of both

```{r }
ggplot(cellannopre2, aes(pANN, scDblFinder.score)) + geom_point(alpha= 0.3) + geom_smooth()


```

Umap and cluster plots
```{r fig.height=6, fig.width=10}
DimPlot(seurat, group.by = c("SCT_snn_res.0.8", "scDblFinder.class", "dbl_doubletfinder",  "dbl_doubletsum"), label = T) & theme(legend.position = "top")

count_doublet_any = cbind(method = "any method", cellannopre2[, .N, .(SCT_snn_res.0.8, doublet = dbl_doubletsumgr0)])
count_doublet_any[, prozent := N[doublet==T]/sum(N), SCT_snn_res.0.8]

count_doublet_sc = cbind(method = "sc_dbl_finder", cellannopre2[, .N, .(SCT_snn_res.0.8, doublet = dbl_scDblFinder_num>0)])
count_doublet_sc[, prozent := N[doublet==T]/sum(N), SCT_snn_res.0.8]

count_doublet_dblfind = cbind(method = "dblfinder", cellannopre2[, .N, .(SCT_snn_res.0.8, doublet = dbl_doubletfinder_num>0)])
count_doublet_dblfind[, prozent := N[doublet==T]/sum(N), SCT_snn_res.0.8]

count_doublet_all = rbind(count_doublet_any,count_doublet_sc,count_doublet_dblfind)

badcluster_dbl = count_doublet_all[prozent>0.5, unique(SCT_snn_res.0.8)]
```

There is enrichment of doublets in a cluster :
```{r fig.height=14, fig.width=16}
ggplot(count_doublet_all[doublet ==TRUE], aes(SCT_snn_res.0.8, prozent, fill = method)) + geom_col(position = "dodge") 
```

# Harmonize provided celltype names
assigned by peter Pennitz
```{r}
refcelltype_ori = read_excel2(here("R/data/All Datasets PopulationsCD4CD8human.xlsx"), "R")
refcelltype = refcelltype_ori[dataset =="hamsterMA"]

seurat$uniform_name_overview_old = refcelltype[match_hk(seurat$celltype    , refcelltype$original_name), uniform_name_overview]

seurat$celltype[is.na(seurat$uniform_name_overview_old)]%>% unique()

seurat$uniform_name_overview_old %>% mytable()

```

CD4 and CD8 subtypes were redefined based on subclustering and Marker genes by Peter Pennitz

```{r}
subcluster = readRDS(here("R/data/T_sub.rds"))
subcluster$orig.ident %>% table()
subcluster_ma_anno = subcluster[, subcluster$orig.ident == "ma"]@meta.data %>% as.data.table(keep.rownames = T)
subcluster_ma_anno$T_cell_Hamster_acurate %>% table()
qlist10 = venn2(colnames(seurat[, seurat$uniform_name_overview_old == "T_Cells"]),
               subcluster_ma_anno$rn)

seurat$uniform_name_overview_temp = subcluster_ma_anno[match_hk(colnames(seurat), subcluster_ma_anno$rn),T_cell_Hamster_acurate ]

seurat$uniform_name_overview = ifelse(colnames(seurat) %in% subcluster_ma_anno$rn, seurat$uniform_name_overview_temp, seurat$uniform_name_overview_old)
```
```{r}
plot_ggSankey_hk(seurat@meta.data[, c( "uniform_name_overview_old","uniform_name_overview")] %>% data.table())
```


# add additional QC measures


For defining e.g. mitochondrial genes, I used ensembl orthologues Ensembl release 109 - Feb 2023 Â© EMBL-EBI

```{r}
orthologues = fread( here("R/results/h217_2_orthologues_measaur_used.txt.gz"))
orthologues[,.N, human_orthologue_by]
orthologues2 = orthologues[ seurat_name %in% rownames(seurat)]
orthologues2[,.N, human_orthologue_by]
```


```{r}
mitogenes_10x = orthologues2[grep('^MT-', human_orthologue_name), seurat_name]
mitogenes_10x

ribogenes_10x = orthologues2[grep('^RP[SL][0-9]*$', human_orthologue_name), seurat_name]
ribogenes_10x

hbgenes_10x_pre =  orthologues2[grep("^HB[^(P)]", human_orthologue_name), seurat_name]
hbgenes_10x_pre
hbgenes_10x = setdiff(hbgenes_10x_pre, c("Hbs1l", "Hbegf")) # this is just controlling hb in the embryo and th second Diphtheria Toxin Receptor (Heparin-Binding EGF-Like Growth Factor) 
hbgenes_10x

pltgenes_10x = orthologues2[grep("^PECAM1|^PF4",human_orthologue_name), seurat_name]
pltgenes_10x



s.genes <- orthologues2[human_orthologue_name %in% cc.genes$s.genes , seurat_name]
s.genes %>% sort()

g2m.genes <- orthologues2[human_orthologue_name %in% cc.genes$g2m.genes, seurat_name]
g2m.genes %>% sort()

```



We calculated following percentages with respective genes:
percent ribosome `r ribogenes_10x %>% pander()`,
percent hemoglobinegenes `r hbgenes_10x %>% pander()`,
percent mitochondria `r mitogenes_10x %>% pander()` 

```{r include=FALSE}


# for calculating PercantageFeaturesSet i now need to to exclude scale.data slot
Layers(object = seurat, pattern = "counts")
seurat_noscale = DietSeurat(seurat, layers =  c("counts", "data"))
Layers(object = seurat, pattern = "counts")
Layers(object = seurat_noscale, pattern = "counts")
stopifnot(identical(colnames(seurat), colnames(seurat_noscale)))

 
seurat$pct.ribo = PercentageFeatureSet(seurat_noscale, features = ribogenes_10x)
seurat$pct.mito = PercentageFeatureSet(seurat_noscale, features = mitogenes_10x)
seurat$pct.hb = PercentageFeatureSet(seurat_noscale, features = hbgenes_10x)
seurat$pct.plt =PercentageFeatureSet(seurat_noscale, features = pltgenes_10x)

seurat$pct_counts_in_top_50_genes =  pct_counts_in_top_N_genes_SCT (seurat, top_N = 50, slot = "SCT")

cellannopre3 = seurat@meta.data %>% data.table(keep.rownames = T)



core_cellparam = c("nFeature_RNA", 'pct_counts_in_top_50_genes',"pct.ribo",
                   "nCount_RNA",  "pct.mito",  "pct.hb")


```





```{r results='hide'}
testthat::test_that("The number of intended qc metrices available in Seurat is 0", expect_length(setdiff(c(core_cellparam), names(seurat@meta.data)),0))

cellannopre3 = seurat@meta.data %>% data.table(keep.rownames = T)
```



# Filter  bad cluster

## Define Cutoff for Labeling clusters BAD

This cutoff can be a little more strict, i.e. defining rather more than less cells as bad QC, as this is only used to label whole clusters, that will be excluded if majority of cells within the cluster is bad 
```{r results='hide'}

cutoffcluster_nFeature_RNA_upper = 2300
cutoffcluster_nFeature_RNA_lower = 350

cutoffcluster_nCount_RNA_upper = 5000
cutoffcluster_nCount_RNA_lower = 1000

cutoffcluster_pct.mito_upper = 8

cutoffcluster_pct.hb_upper = 1

cutoffcluster_pct.ribo_upper = 50
cutoffcluster_pct.ribo_lower = 0.2

cutoffcluster_pct_counts_in_top_50_genes = 30
qc_cutoffcluster_tab_seurat = data.table(rbind(data.table(variable = 'nFeature_RNA', value = c( cutoffcluster_nFeature_RNA_upper  ,cutoffcluster_nFeature_RNA_lower)),
                                               data.table(variable = 'nCount_RNA', value = c( cutoffcluster_nCount_RNA_upper  ,cutoffcluster_nCount_RNA_lower)),
                                               data.table(variable = 'pct.mito', value = c( cutoffcluster_pct.mito_upper )) ,  
                                               data.table(variable = 'pct.hb', value = c( cutoffcluster_pct.hb_upper )) ,
                                               data.table(variable = 'pct.ribo', value = c( cutoffcluster_pct.ribo_upper, cutoffcluster_pct.ribo_lower )) ,
                                               data.table(variable = 'pct_counts_in_top_50_genes', value = c( cutoffcluster_pct_counts_in_top_50_genes ))))

writexl::write_xlsx(qc_cutoffcluster_tab_seurat, here("R/results/h221_5_qc_cutoffcluster_hamsterMA.xlsx"))
```

```{r}
qc_cutoffcluster_tab_seurat %>% pander()
```



```{r fig.height=12, fig.width=16, results='hide', warning=FALSE}

plot_qc_with_cutoffs <- function(cellannotation, stratifycol, doubletcol, core_cellparam,qc_cutofftable) {
  plot1 = ggplot(melt(cellannotation, id.vars = stratifycol, measure.vars = core_cellparam), aes( x=.data[[stratifycol]],y=value, fill =.data[[stratifycol]])) +
    geom_violin(scale = "width")  + 
    facet_wrap(~variable, 
               scales= "free") + 
    theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.4))  + 
    guides(fill = "none")+ geom_hline(data = qc_cutofftable, aes(yintercept = value), lty = 2)
  
  plot2 = ggplot(cellannotation, aes( .data[[stratifycol]], fill =.data[[doubletcol]])) +
    geom_bar(position = "fill")  + 
    theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.4), 
          legend.position = "top")
  plot1 + plot2 + plot_layout(widths = c(3,1))
    
}
plotqc_seurat1_inc = plot_qc_with_cutoffs(cellannotation = cellannopre3,stratifycol = "run10x",
                                          doubletcol = "dbl_doubletsumgr0",
                                          
                                          qc_cutofftable = qc_cutoffcluster_tab_seurat,
                                          core_cellparam = core_cellparam
                                            
                                            )+ 
    plot_annotation(title = "seurat for bad cluster definition", "not filtered")
plotqc_seurat1_inc
plotqc_seurat1_inc   & scale_y_log1p(breaks = log1p_breaks(20))


```


```{r }

cellannopre3[, lowQC_cluster := nFeature_RNA> cutoffcluster_nFeature_RNA_upper |
               nFeature_RNA < cutoffcluster_nFeature_RNA_lower |
               nCount_RNA > cutoffcluster_nCount_RNA_upper |
               nCount_RNA < cutoffcluster_nCount_RNA_lower |
               pct.mito > cutoffcluster_pct.mito_upper |
               pct.hb > cutoffcluster_pct.hb_upper  |
               pct.ribo > cutoffcluster_pct.ribo_upper | # TODO adapt fro scRNA typically lower!!!!
               pct_counts_in_top_50_genes > cutoffcluster_pct_counts_in_top_50_genes]

lowQC_proz = cellannopre3[, .N, lowQC_cluster]
lowQC_proz[, prozi := (N / sum(N)) %>% proz() ]


doublet2_proz = cellannopre3[, .N, dbl_doubletsumgr0]
doublet2_proz[, prozi := (N / sum(N)) %>% proz() ]

lowQC_or_doublet = cellannopre3[, .N, .(dbl_doubletsumgr0 | lowQC_cluster)]
lowQC_or_doublet[, prozi := (N / sum(N)) %>% proz() ]

```

If any of the cells does not adhere to these cutoffs (`r lowQC_proz[lowQC_cluster==T, prozi]`) or is found to be positive in any doublet tests with expected doublet rate of 1% (`r doublet2_proz[dbl_doubletsumgr0==T, prozi]`), it is marked potential bad QC cell (`r lowQC_or_doublet[dbl_doubletsumgr0 ==T, prozi]`)


On the base of this  clustering level, I will clusterwise define bad QC cells. However, I will additionally identify bad clusters based on the integrated object

```{r results='hide',fig.width=10, fig.height=12}
seurat$lowQC_cluster = cellannopre3[match_hk(colnames(seurat), cellannopre3$rn),lowQC_cluster]
seurat$lowQC_cluster %>% mytable()

seurat$dbl_doublet = seurat$dbl_doubletsumgr0
cellannopre3$dbl_doublet = seurat$dbl_doubletsumgr0
seurat$dbl_doublet %>% mytable()

seurat$lowQC_or_doublet = seurat$dbl_doubletsumgr0 |seurat$lowQC_cluster
cellannopre3[, lowQC_or_doublet := dbl_doubletsumgr0 |lowQC_cluster]
seurat$lowQC_or_doublet %>% mytable()

p1 = DimPlot(seurat, group.by = c("SCT_snn_res.0.8","uniform_name_overview"), label  = T) & guides(color = "none") 

p2 = DimPlot(seurat, group.by =  c('lowQC_cluster', 'dbl_doublet',"lowQC_or_doublet"), shuffle = T) &  theme(legend.position = "top")

p1/p2

```


```{r results='hide', fig.width=15, fig.height=9}
lowQC_or_doublet_df = rbind(
  cbind(variable = "lowQC_cluster", cellannopre3[, .N, .(SCT_snn_res.0.8, badqc = lowQC_cluster)]),
  cbind(variable = "dbl_doublet", cellannopre3[, .N, .(SCT_snn_res.0.8, badqc = dbl_doublet)]),
  cbind(variable = "lowQC_or_doublet", cellannopre3[, .N, .(SCT_snn_res.0.8, badqc = lowQC_or_doublet)])
)

lowQC_or_doublet_df[, prozent := N/sum(N), .(SCT_snn_res.0.8, variable)]
bad_clusterIDs_pre = lowQC_or_doublet_df[variable =='lowQC_or_doublet' & prozent>0.5 & badqc==TRUE,SCT_snn_res.0.8] %>% sort()

lowQC_or_doublet_df[, bad_cluster := SCT_snn_res.0.8 %in% bad_clusterIDs_pre]


lowQC_or_doublet_df[, cells_in_cluster := sum(N), .(SCT_snn_res.0.8, variable)]

setorder(lowQC_or_doublet_df, -cells_in_cluster)
lowQC_or_doublet_df[, SCT_snn_res.0.8_ordered_by_N_decreasing := factor(SCT_snn_res.0.8, levels = unique(SCT_snn_res.0.8))]

p4 = (ggplot(lowQC_or_doublet_df[badqc == TRUE], aes(SCT_snn_res.0.8_ordered_by_N_decreasing, prozent, fill = variable, alpha = bad_cluster)) +
        geom_col(position = "dodge") + 
        # facet_grid(.~ bad_cluster, scales = "free", space = "free", labeller = 'label_both') + 
        geom_hline(yintercept = 0.5, lty = 2) + 
        scale_y_continuous(label = label_percent(accuracy = 1), breaks = pretty_breaks(10))) + 
  theme(legend.position = "top") +
  scale_alpha_manual(values = c(0.5, 1))
```


```{r results='hide', fig.width=15, fig.height=9}
lowQC_or_doublet_dfcelltype = rbind(
  cbind(variable = "lowQC_cluster", cellannopre3[, .N, .(uniform_name_overview, badqc = lowQC_cluster)]),
  cbind(variable = "dbl_doublet", cellannopre3[, .N, .(uniform_name_overview, badqc = dbl_doublet)]),
  cbind(variable = "lowQC_or_doublet", cellannopre3[, .N, .(uniform_name_overview, badqc = lowQC_or_doublet)])
)

lowQC_or_doublet_dfcelltype[, prozent := N/sum(N), .(uniform_name_overview, variable)]

bad_celltype = lowQC_or_doublet_dfcelltype[variable =='lowQC_or_doublet' & prozent>0.5 & badqc==TRUE,uniform_name_overview]
# 
lowQC_or_doublet_dfcelltype[, bad_cluster_celltype := uniform_name_overview %in% bad_celltype]
# 
lowQC_or_doublet_dfcelltype[, cells_in_cluster := sum(N), .(uniform_name_overview, variable)]

setorder(lowQC_or_doublet_dfcelltype, -cells_in_cluster)
lowQC_or_doublet_dfcelltype[, uniform_name_overview_ordered_by_N_decreasing := factor(uniform_name_overview, levels = unique(uniform_name_overview))]

p4_celltype = (ggplot(lowQC_or_doublet_dfcelltype[badqc == TRUE], aes(uniform_name_overview_ordered_by_N_decreasing, prozent, fill = variable, alpha = bad_cluster_celltype)) + geom_col(position = "dodge") + 
                 # facet_grid(.~ bad_cluster_celltype, scales = "free", space = "free", labeller = 'label_both') + 
                 geom_hline(yintercept = 0.5, lty = 2) + scale_y_continuous(label = label_percent(accuracy = 1), breaks = pretty_breaks(10))) + theme(legend.position = "top") + scale_alpha_manual(values = c(0.5, 1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```



```{r results='hide', fig.width=15, fig.height=20}
p55 = DimPlot(seurat, group.by = c("SCT_snn_res.0.8",'lowQC_or_doublet_cluster','uniform_name_overview' ), label = T, shuffle = T, label.size = 4, repel = T) 
(p4+p4_celltype)/p55

jpeg2(here("R/results/h221_5_definign_bad_clusters_details1_hamsterMA.jpeg"), 14,10)
plot((p4+p4_celltype)/p55)
dev.off()
```

## show problems of problematic cell clusters
```{r fig.width=9, fig.height=9}


p16a = plot_qc_with_cutoffs(cellannotation = cellannopre3[SCT_snn_res.0.8 %in% bad_clusterIDs_pre],stratifycol = "SCT_snn_res.0.8",doubletcol = "dbl_doubletsumgr0",
                                          
                                          qc_cutofftable = qc_cutoffcluster_tab_seurat,
                                          core_cellparam = core_cellparam
                                            
                                            )+ 
    plot_annotation(title = "bad clusters", "not filtered")


p16b = plot_ggSankey_hk(cellannopre3[SCT_snn_res.0.8 %in% bad_clusterIDs_pre,.(SCT_snn_res.0.8, uniform_name_overview )] %>% data.table())


p16a+p16b  +plot_layout(widths = c(4,1,2))

```

```{r}
jpeg2(here("R/results/h221_5_definign_bad_clusters_details2_hamsterMA.jpeg"), 14,10)
plot(p16a+p16b  +plot_layout(widths = c(4,1,2)))
dev.off()

```


We do not exclude cluster 19 as it is the nonclassical Monocyte cluster,
we also do not exclude cluster 13, as it is the NK-cell cluster
```{r results='hide'}
bad_clusterIDs = setdiff(bad_clusterIDs_pre, c(13, 19))
seurat$lowQC_or_doublet_cluster = seurat$SCT_snn_res.0.8 %in% bad_clusterIDs
tableeintraege = seurat$lowQC_or_doublet_cluster %>% mytable() %>% unlist()

```

As bad cluster, I consider only cluster not excluding a whole celltype. Hence, I mark clusters `r bad_clusterIDs %>% pander()`, i.e. N= `r tableeintraege['observed2'] %>% as.character()` I do not exclude the other cluster, as it corresponds to a single celltype


```{r}
cellannopre3b = seurat@meta.data %>% as.data.table(keep.rownames = T)
draussen = cellannopre3b[,.N, .(lowQC_or_doublet_cluster, uniform_name_overview)]
draussen[, prozent := N/sum(N) , uniform_name_overview]
draussen[, prozent2 :=prozent %>% proz()]

draussen[lowQC_or_doublet_cluster==T][order(-prozent)][,.(uniform_name_overview,N, prozent2)] %>% pander()
seurat2 = seurat[, seurat$lowQC_or_doublet_cluster==F]
```



# filter  bad cells without excluding cluster

## Define Cutoff 

This cutoff should be more strict, i.e. identifying less cells as bad QC, as this defines the additionally bad cells to exclude. The following plots are allways excluded

```{r  results='hide'}

cutoffcluster_nFeature_RNA_upper
cutoffcell_nFeature_RNA_upper = 2500
cutoffcluster_nFeature_RNA_lower
cutoffcell_nFeature_RNA_lower = 300

cutoffcluster_nCount_RNA_upper
cutoffcell_nCount_RNA_upper = 5500
cutoffcluster_nCount_RNA_lower
cutoffcell_nCount_RNA_lower = 800

cutoffcluster_pct.mito_upper
cutoffcell_pct.mito_upper = 9

cutoffcluster_pct.hb_upper
cutoffcell_pct.hb_upper = 1

cutoffcluster_pct.ribo_upper
cutoffcell_pct.ribo_upper = 50
cutoffcluster_pct.ribo_lower
cutoffcell_pct.ribo_lower = 0.15

cutoffcluster_pct_counts_in_top_50_genes
cutoffcell_pct_counts_in_top_50_genes = 40


qc_cutoffcell_tab_seurat = data.table(rbind(data.table(variable = 'nFeature_RNA', value = c( cutoffcell_nFeature_RNA_upper  ,cutoffcell_nFeature_RNA_lower)),
                                            data.table(variable = 'nCount_RNA', value = c( cutoffcell_nCount_RNA_upper  ,cutoffcell_nCount_RNA_lower)),
                                            data.table(variable = 'pct.mito', value = c( cutoffcell_pct.mito_upper )) ,  
                                            data.table(variable = 'pct.hb', value = c( cutoffcell_pct.hb_upper )) ,
                                            data.table(variable = 'pct.ribo', value = c( cutoffcell_pct.ribo_upper, cutoffcell_pct.ribo_lower )) ,
                                            data.table(variable = 'pct_counts_in_top_50_genes', value = c( cutoffcell_pct_counts_in_top_50_genes ))))



```


```{r}

qc_cutoffcell_tab_seurat %>% pander()
```

```{r fig.height=12, fig.width=16, results='hide', warning=FALSE}
# Custom scale function
cellannopre4 = seurat2@meta.data %>% data.table(keep.rownames = T)



plotqc_seurat1_inc_cell = plot_qc_with_cutoffs(cellannotation = cellannopre4,stratifycol = "run10x",
                                          doubletcol = "dbl_doubletsumgr0",
                                          
                                          qc_cutofftable = qc_cutoffcell_tab_seurat,
                                          core_cellparam = core_cellparam
                                            
                                            )+ 
    plot_annotation(title = "seurat for bad cluster definition", "cluster filtered")
plotqc_seurat1_inc_cell
plotqc_seurat1_inc_cell   & scale_y_log1p(breaks = log1p_breaks(20))


```
I also exclude the doublet cells found in any of the methods

```{r }

cellannopre4[, lowQC_or_doublet_cell := nFeature_RNA> cutoffcell_nFeature_RNA_upper |
               nFeature_RNA < cutoffcell_nFeature_RNA_lower |
               nCount_RNA > cutoffcell_nCount_RNA_upper |
               nCount_RNA < cutoffcell_nCount_RNA_lower |
               pct.mito > cutoffcell_pct.mito_upper |
               pct.hb > cutoffcell_pct.hb_upper  |
               pct.ribo > cutoffcell_pct.ribo_upper | 
               pct.ribo < cutoffcell_pct.ribo_lower | 
               pct_counts_in_top_50_genes > cutoffcell_pct_counts_in_top_50_genes |
               dbl_doubletsumgr0==T]

lowQC_proz_cell = cellannopre4[, .N, lowQC_or_doublet_cell]
lowQC_proz_cell[, prozi := (N / sum(N)) %>% proz() ]

```
### exclude bad cells
If any of the cells does not adhere to these cutoffs, it is excluded (`r lowQC_proz_cell[lowQC_or_doublet_cell==T, prozi]`)


```{r results='hide',fig.width=10, fig.height=7}
seurat2$lowQC_or_doublet_cell = cellannopre4[match_hk(colnames(seurat2), cellannopre4$rn),lowQC_or_doublet_cell]
seurat2$lowQC_or_doublet_cell %>% mytable()

p1_cell = DimPlot(seurat2, group.by = c("SCT_snn_res.0.8","uniform_name_overview"), label  = T) & guides(color = "none") 
# p2 = DimPlot(seurat2, group.by =  c('lowQC_cluster', 'dbl_doublet', 'lowQC_or_doublet')) &  theme(legend.position = "top")
p2_cell = DimPlot(seurat2, group.by =  c('lowQC_or_doublet_cell')) &  theme(legend.position = "top")

p1_cell+p2_cell
```


```{r results='hide', fig.width=9, fig.height=9}
lowQC_or_doublet_cell_cluster_df = rbind(
  cbind(variable = "lowQC_or_doublet_cell", cellannopre4[, .N, .(SCT_snn_res.0.8, badqc = lowQC_or_doublet_cell)])
  
)

lowQC_or_doublet_cell_cluster_df[, prozent := N/sum(N), .(SCT_snn_res.0.8, variable)]

lowQC_or_doublet_cell_cluster_df[, cells_in_cluster := sum(N), .(SCT_snn_res.0.8, variable)]

setorder(lowQC_or_doublet_cell_cluster_df, -cells_in_cluster)
lowQC_or_doublet_cell_cluster_df[, SCT_snn_res.0.8_ordered_by_N_decreasing := factor(SCT_snn_res.0.8, levels = unique(SCT_snn_res.0.8))]

average_excluded_cell = sum(seurat2$lowQC_or_doublet_cell==T)/ncol(seurat2) 

p4_cell_cluster = (ggplot(lowQC_or_doublet_cell_cluster_df[badqc == TRUE], aes(SCT_snn_res.0.8_ordered_by_N_decreasing, prozent, fill = variable)) + geom_col(position = "dodge") + 
                     # facet_grid(.~ bad_cluster, scales = "free", space = "free", labeller = 'label_both') + 
                     geom_hline(yintercept = average_excluded_cell, lty = 2)+
                     ggtitle("", "dashed line = average excluded") +
                     scale_y_continuous(label = label_percent(accuracy = 1), breaks = pretty_breaks(10))) + theme(legend.position = "top") + scale_alpha_manual(values = c(0.5, 1)) 



lowQC_or_doublet_cell_celltype_df = rbind(
  cbind(variable = "lowQC_or_doublet_cell", cellannopre4[, .N, .(uniform_name_overview, badqc = lowQC_or_doublet_cell)])
  
)

lowQC_or_doublet_cell_celltype_df[, prozent := N/sum(N), .(uniform_name_overview, variable)]

lowQC_or_doublet_cell_celltype_df[, cells_in_cluster := sum(N), .(uniform_name_overview, variable)]

setorder(lowQC_or_doublet_cell_celltype_df, -cells_in_cluster)
lowQC_or_doublet_cell_celltype_df[, azimuth_l1_ordered_by_N_decreasing := factor(uniform_name_overview, levels = unique(uniform_name_overview))]

p4_cell_celltype = ggplot(lowQC_or_doublet_cell_celltype_df[badqc == TRUE], aes(azimuth_l1_ordered_by_N_decreasing, prozent, fill = variable)) + geom_col(position = "dodge") + 
  # facet_grid(.~ bad_cluster, scales = "free", space = "free", labeller = 'label_both') + 
  # geom_hline(yintercept = 0.5, lty = 2) + 
  scale_y_continuous(label = label_percent(accuracy = 1), 
                     # limits = c(0, 0.5),
                     breaks = pretty_breaks(10)
  ) + 
  geom_hline(yintercept = average_excluded_cell, lty = 2)+
  ggtitle("", "dashed line = average excluded") +
  theme(legend.position = "top") + scale_alpha_manual(values = c(0.5, 1)) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


p4_cell_cluster/p4_cell_celltype & ylab("")


seurat$lowQC_or_doublet_cell  = cellannopre4[match_hk(colnames(seurat), cellannopre4$rn), lowQC_or_doublet_cell]
# seurat$lowQC_or_doublet_cell %>% mytable()
seurat$lowQC_or_doublet_cell = ifelse(seurat$SCT_snn_res.0.8 %in% bad_clusterIDs, TRUE, seurat$lowQC_or_doublet_cell)

tableeintraege_cell = seurat$lowQC_or_doublet_cell %>% mytable() %>% unlist()

```

Hence, I additionally sign those bad cells (N= `r sum(seurat2$lowQC_or_doublet_cell==T) %>% as.character()`, `r average_excluded_cell %>% proz()`).

Including bad cluster cells, I mark following cells as bad QC: `r tableeintraege_cell['observed2']`


## Save cutoff visualisation



# SAVE

```{r saving}
cellanno = seurat@meta.data %>% as.data.table(keep.rownames = T)
fwrite(cellanno, here("R/results/h221_5_qc_hamsterMA_singlestudy_cellanno.txt.gz"))

saveRDS(seurat, here("R/results/h221_5_qc_hamsterMA_singlestudy.rds"))
```

# finalize

```{r}
finalizeSkript()

```

R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

Random number generation:
 RNG:     L'Ecuyer-CMRG 
 Normal:  Inversion 
 Sample:  Rejection 
 
locale:
[1] LC_COLLATE=German_Germany.utf8  LC_CTYPE=German_Germany.utf8   
[3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.utf8    

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] future_1.32.0               dplyr_1.1.1                
 [3] ggrepel_0.9.3               ggsankey_0.0.99999         
 [5] pander_0.6.5                scDblFinder_1.12.0         
 [7] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0
 [9] Biobase_2.58.0              GenomicRanges_1.50.2       
[11] GenomeInfoDb_1.34.9         IRanges_2.32.0             
[13] S4Vectors_0.36.1            BiocGenerics_0.44.0        
[15] MatrixGenerics_1.10.0       matrixStats_0.63.0         
[17] patchwork_1.1.2             sva_3.46.0                 
[19] BiocParallel_1.32.5         genefilter_1.80.3          
[21] mgcv_1.8-42                 nlme_3.1-161               
[23] ggplot2_3.4.2               here_1.0.1                 
[25] SeuratWrappers_0.3.19       Seurat_4.9.9.9044          
[27] SeuratObject_4.9.9.9084     sp_1.6-0                   
[29] toolboxH_0.2.17             eulerr_7.0.0               
[31] testthat_3.1.7              stringr_1.5.0              
[33] scales_1.2.1                readxl_1.4.2               
[35] RColorBrewer_1.1-3          png_0.1-8                  
[37] fdrtool_1.2.17              R.utils_2.12.2             
[39] R.oo_1.25.0                 R.methodsS3_1.8.2          
[41] data.table_1.14.8          

loaded via a namespace (and not attached):
  [1] rtracklayer_1.58.0        scattermore_1.0          
  [3] tidyr_1.3.0               bit64_4.0.5              
  [5] knitr_1.42                irlba_2.3.5.1            
  [7] DelayedArray_0.24.0       KEGGREST_1.38.0          
  [9] RCurl_1.98-1.9            generics_0.1.3           
 [11] ScaledMatrix_1.6.0        cowplot_1.1.1            
 [13] RSQLite_2.2.20            RANN_2.6.1               
 [15] bit_4.0.5                 spatstat.data_3.0-1      
 [17] httpuv_1.6.9              viridis_0.6.2            
 [19] xfun_0.38                 evaluate_0.20            
 [21] promises_1.2.0.1          fansi_1.0.4              
 [23] restfulr_0.0.15           igraph_1.4.1             
 [25] DBI_1.1.3                 htmlwidgets_1.6.2        
 [27] spatstat.geom_3.1-0       purrr_1.0.1              
 [29] ellipsis_0.3.2            RSpectra_0.16-1          
 [31] annotate_1.76.0           deldir_1.0-6             
 [33] sparseMatrixStats_1.10.0  vctrs_0.6.1              
 [35] remotes_2.4.2             ROCR_1.0-11              
 [37] abind_1.4-5               cachem_1.0.7             
 [39] withr_2.5.0               progressr_0.13.0         
 [41] sctransform_0.3.5         GenomicAlignments_1.34.0 
 [43] scran_1.26.2              goftest_1.2-3            
 [45] cluster_2.1.4             dotCall64_1.0-2          
 [47] lazyeval_0.2.2            crayon_1.5.2             
 [49] spatstat.explore_3.1-0    edgeR_3.40.2             
 [51] pkgconfig_2.0.3           labeling_0.4.2           
 [53] vipor_0.4.5               pkgload_1.3.2            
 [55] rlang_1.1.0               globals_0.16.2           
 [57] lifecycle_1.0.3           miniUI_0.1.1.1           
 [59] fastDummies_1.6.3         rsvd_1.0.5               
 [61] cellranger_1.1.0          rprojroot_2.0.3          
 [63] polyclip_1.10-4           RcppHNSW_0.4.1           
 [65] lmtest_0.9-40             Matrix_1.5-3             
 [67] zoo_1.8-11                beeswarm_0.4.0           
 [69] ggridges_0.5.4            viridisLite_0.4.2        
 [71] rjson_0.2.21              bitops_1.0-7             
 [73] KernSmooth_2.23-20        spam_2.9-1               
 [75] Biostrings_2.66.0         blob_1.2.3               
 [77] DelayedMatrixStats_1.20.0 parallelly_1.35.0        
 [79] spatstat.random_3.1-4     beachmat_2.14.0          
 [81] memoise_2.0.1             magrittr_2.0.3           
 [83] plyr_1.8.8                ica_1.0-3                
 [85] zlibbioc_1.44.0           compiler_4.2.3           
 [87] dqrng_0.3.0               BiocIO_1.8.0             
 [89] fitdistrplus_1.1-8        Rsamtools_2.14.0         
 [91] cli_3.6.1                 XVector_0.38.0           
 [93] listenv_0.9.0             pbapply_1.7-0            
 [95] MASS_7.3-58.2             tidyselect_1.2.0         
 [97] stringi_1.7.12            yaml_2.3.7               
 [99] BiocSingular_1.14.0       locfit_1.5-9.7           
[101] grid_4.2.3                tools_4.2.3              
[103] future.apply_1.10.0       parallel_4.2.3           
[105] rstudioapi_0.14           bluster_1.8.0            
[107] metapod_1.6.0             gridExtra_2.3            
[109] farver_2.1.1              Rtsne_0.16               
[111] digest_0.6.31             BiocManager_1.30.20      
[113] shiny_1.7.4               Rcpp_1.0.10              
[115] scuttle_1.8.4             later_1.3.0              
[117] RcppAnnoy_0.0.20          httr_1.4.5               
[119] AnnotationDbi_1.60.0      colorspace_2.1-0         
[121] brio_1.1.3                XML_3.99-0.13            
[123] tensor_1.5                reticulate_1.28          
[125] splines_4.2.3             uwot_0.1.14              
[127] statmod_1.5.0             spatstat.utils_3.0-2     
[129] scater_1.26.1             xgboost_1.7.5.1          
[131] plotly_4.10.1             xtable_1.8-4             
[133] jsonlite_1.8.4            R6_2.5.1                 
[135] pillar_1.9.0              htmltools_0.5.5          
[137] mime_0.12                 glue_1.6.2               
[139] fastmap_1.1.1             BiocNeighbors_1.16.0     
[141] codetools_0.2-19          utf8_1.2.3               
[143] lattice_0.20-45           spatstat.sparse_3.0-1    
[145] tibble_3.2.1              ggbeeswarm_0.7.1         
[147] leiden_0.4.3              survival_3.5-0           
[149] limma_3.54.0              rmarkdown_2.21           
[151] desc_1.4.2                munsell_0.5.0            
[153] GenomeInfoDbData_1.2.9    reshape2_1.4.4           
[155] gtable_0.3.3  
