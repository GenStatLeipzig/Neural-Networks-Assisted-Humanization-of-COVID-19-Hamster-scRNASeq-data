---
title: "h224_3_integration_beforeQC.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r results='hide', message=FALSE}

#' # INITIIEREN ####
set.seed(192)
.libPaths()

all_times <- list()  # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      now <<- Sys.time()
    } else {
      res <- difftime(Sys.time(), now, units = "secs")
      all_times[[options$label]] <<- res
    }
  }
}))
knitr::opts_chunk$set(
  tidy = 'styler',
  fig.width = 10,
  message = FALSE,
  warning = FALSE,
  time_it = TRUE,
  error = TRUE
)

library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(patchwork)
library(BiocParallel)
library(scDblFinder)
library(pander)
  require(ggsankey)
  require(ggrepel)

  require(dplyr)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# AIM

integrating three species

https://github.com/satijalab/seurat/blob/seurat5/vignettes/seurat5_integration.Rmd
https://satijalab.org/seurat/articles/seurat5_integration.html


# Dataimport

```{r}
# load hamster MA ----
if(all(c('hamsterMA', 'hamsterMA', 'human') %in% ls())==F) {
hamsterMA = readRDS(here("R/results/h221_5_qc_hamsterMA_singlestudy.rds"))
hamsterMA 

hamsterPR = readRDS(here("R/results/h222_2_qc_hamsterPR_singlestudy.rds"))
hamsterPR

human = readRDS(here("R/results/h220_5_qc_human_singlestudy.rds"))
human
}
```



# unifying gene names
```{r results='hide', fig.show='hide'}

orthologues_MA = fread(here("R/results/h217_2_orthologues_measaur_used.txt.gz"), na.strings = c("NA", ""))
# showNA(orthologues_MA, showAllNoNA = F)
orthologues_MA2 = orthologues_MA[is.na(human_orthologue_name)==F & seurat_name %in% rownames(hamsterMA)]
orthologues_MA2[,.N, human_orthologue_by]
 qlist1 = venn3(rownames(hamsterMA), orthologues_MA$seurat_name, orthologues_MA2$seurat_name)
orthologues_MA2_orthopur = orthologues_MA2[human_orthologue_by !=  "04:same name uppercase in human"]
orthologues_MA2_orthopur[,.N, human_orthologue_by]
 

orthologues_PR = fread(here("R/results/h216_2_gene_annotation_Phodopus_roborovskii.txt.gz"), na.strings = c("NA", ""))
# showNA(orthologues_PR, showAllNoNA = F)
orthologues_PR2 = orthologues_PR[is.na(human_orthologue_name)==F & seurat_name %in% rownames(hamsterPR)]
orthologues_PR2[,.N, human_orthologue_by]

qlist2 = venn3(rownames(hamsterPR), orthologues_PR$seurat_name,orthologues_PR2$seurat_name)

orthologues_PR2_orthopur = orthologues_PR2[human_orthologue_by !=  "03:same name uppercase in human"]
orthologues_PR2_orthopur[,.N, human_orthologue_by]



```




```{r}
qlist3 = venn3(orthologues_MA2$human_orthologue_name, orthologues_PR2$human_orthologue_name, rownames(human))
str(qlist3)

```
In Ensembl release 104 - May 2021 Human genes (GRCh38.p13), a total of "`r length(qlist3$q1)` genes have orthologues in all three species.


```{r}
qlist4 = venn3(orthologues_MA2_orthopur$human_orthologue_name, orthologues_PR2_orthopur$human_orthologue_name, rownames(human))

```


When excluding genes assigned by matching gene names without support from orthologues databases, a total of "`r length(qlist4$q1)` genes have orthologues in all three species.

The additional genes in the first scenario are
```{r}
additionalgenes = setdiff(qlist3$q1, qlist4$q1) %>% sort()
pander(additionalgenes)
```
(`r length(additionalgenes)` additional genes)

```{r}
# prioritize for duplicated genes higher expressed gene ----
av_express_human = AverageExpression(human,assays = "SCT", slot = "count")
hh(av_express_human$SCT)


av_express_human_dt = data.table(name_human = rownames(av_express_human$SCT),
                                        max_in_human = apply(av_express_human$SCT, 1, max))



# reating table for renaming gene names ----
# require(Seurat.utils) #  # from https://github.com/vertesy/Seurat.utils install via devtools::install_github("vertesy/Seurat.utils") or source directly
RenameGenesSeurat <- function(seurat , renamingtable) { # Replace gene names in different slots of a Seurat object. Run this before integration. Run this before integration. It only changes seurat@assays$RNA@counts, @data and @scale.data.

  message("Run this before integration. It only changes seurat@assays$RNA@counts, @data and @scale.data.")
  
  testthat::test_that("oldname and newname are namenames of renamingtable", expect_true( all(c("oldname", "newname") %in% names(renamingtable))))
  
  RNA <- seurat@assays$RNA
  
  genenametable = data.table(oldname = rownames(RNA))
  genenametable[, newname := renamingtable[match_hk(genenametable$oldname, renamingtable$oldname, makeunique = T, importcol = renamingtable$newname), newname]]
  genenametable[is.na(newname), newname :=oldname]
  
  duplicheck = genenametable[allDuplicatedEntries(newname)]
  if(nrow(duplicheck)>0) {
    print(duplicheck)
    stop("duplicates found after trying to rename")
  }
  
  newnames = genenametable$newname
  
  if (nrow(RNA) == length(newnames)) {
    if (length(RNA@counts)) RNA@counts@Dimnames[[1]]            <- newnames
    if (length(RNA@data)) RNA@data@Dimnames[[1]]                <- newnames
    if (length(RNA@scale.data)) RNA@scale.data@Dimnames[[1]]    <- newnames
    # if (length(seurat@meta.data)) rownames(seurat@meta.data)          <- newnames
  } else {"Unequal gene sets: nrow(RNA) != nrow(newnames)"}
  seurat@assays$RNA <- RNA
  return(seurat)
}


# ##count realized gene overlap ----

makeInputUpset = function(plotlist) {
  library(data.table)
  if(length(names(plotlist))==0) {
    message("no names for list entries found -  providing standardnames  `list1...")
    names_list = paste0("list", seq(along = plotlist))
    names(plotlist) = names_list
  } else names_list = names(plotlist)
  
  plotlist2 = lapply(names_list, function(myname) {
    data.table(variable = myname,value = plotlist[[myname]])
  }
  )
  
  plotlist3 = rbindlist(plotlist2)
  
  plotlist4 = dcast.data.table(plotlist3, value ~ variable, fun.aggregate = function(x) as.numeric(length(x)>0 ))
  plotlist4
  
}


require(UpSetR)


input1 = makeInputUpset(list(hamsterMA = orthologues_MA[seurat_name %in% rownames(hamsterMA), human_orthologue_name],
                             hamsterPR = orthologues_PR[seurat_name %in% rownames(hamsterPR), human_orthologue_name],
                             human = rownames(human)))[is.na(value)==F]




```

After gene conversion, the overlap is as follows
```{r}
upset(input1,nsets = ncol(input1)-1,order.by =c("freq" ,"degree"), decreasing = c(TRUE, TRUE), set_size.scale_max =35000, text.scale = 1.3, set_size.show = TRUE,mainbar.y.label = "Overlap Genes", nintersects = ncol(input1))

jpeg(here("R/results/h224_3_overlap_genes_all_datasets.jpeg"), width = 6.5, height = 4.5, units = "in", res = 150, quality = 100)

upset(input1,nsets = ncol(input1)-1,order.by =c("freq" ,"degree"), decreasing = c(TRUE, TRUE), set_size.scale_max =35000, text.scale = 1.3, set_size.show = TRUE,mainbar.y.label = "Overlap Genes", nintersects = ncol(input1))

dev.off()

pdf(here("R/results/h224_3_overlap_genes_all_datasets.pdf"), width = 6.5, height = 4.5)

upset(input1,nsets = ncol(input1)-1,order.by =c("freq" ,"degree"), decreasing = c(TRUE, TRUE), set_size.scale_max= 35000, text.scale = 1.3, set_size.show = TRUE,mainbar.y.label = "Overlap Genes", nintersects = ncol(input1))

dev.off()


fwrite(input1, here("R/results/h224_3_overlap_genes_all_datasets_plotdat.txt.gz"))

```
## for supplementary table
```{r}
orthotable = rbind(orthologues_MA[seurat_name %in% rownames(hamsterMA), .(species = "hamsterma", gene_name, seurat_name, human_orthologue_name,human_orthologue_id , human_orthologue_by)],
                             orthologues_PR[seurat_name %in% rownames(hamsterPR), .(species = "hamsterpr", gene_name, seurat_name, human_orthologue_name,human_orthologue_id , human_orthologue_by)])[order(human_orthologue_by,human_orthologue_name, na.last = T)] %>% unique()

orthotable[, uniqueN(human_orthologue_name, na.rm = T), species]
orthotable[, .N, .(species, human_orthologue_by)][order(species, human_orthologue_by, decreasing = F)]

WriteXLS::WriteXLS(list(orthologues = orthotable), here("R/results/h224_3_orhologues_used.xlsx"))
```



```{r results='hide'}


hamsterMA2 = RenameGenesSeurat(seurat = hamsterMA, renamingtable = orthologues_MA[,.(oldname = seurat_name, newname = human_orthologue_name)])
hamsterMA2@active.assay = "RNA"

hamsterPR2 = RenameGenesSeurat(seurat = hamsterPR, renamingtable = orthologues_PR[,.(oldname = seurat_name, newname = human_orthologue_name)])
hamsterPR2@active.assay = "RNA"

intersectgenes = qlist3$q1
```



# integrate

Seurat v5 assays store data in layers. These layers can store raw, un-normalized counts (`layer='counts'`), normalized data (`layer='data'`), or z-scored/variance-stabilized data (`layer='scale.data'`). We can load in the data, remove low-quality cells, and obtain predicted cell annotations (which will be useful for assessing integration later), using our [Azimuth pipeline](https://satijalab.github.io/azimuth/articles/run_azimuth_tutorial.html).

# switch to v5 assay version
https://github.com/satijalab/seurat/blob/seurat5/vignettes/seurat5_essential_commands.Rmd


# creating a single object

```{r}
# remove nonRNA assays
hamsterMA = DietSeurat(hamsterMA2, layers =  c("counts", "data") , assays = "RNA")
hamsterMA

hamsterPR = DietSeurat(hamsterPR2, layers =  c("counts", "data") , assays = "RNA")
hamsterPR

DefaultAssay(human) = "RNA"
human= DietSeurat(human, layers =  c("counts", "data") , assays = "RNA")
human

rm(hamsterMA2, hamsterPR2)
gc()
qlist55 = venn3(rownames(human), 
                rownames(hamsterMA), 
                rownames(hamsterPR)
                )

human$species = "human"
hamsterMA$species = "hamsterMA"
hamsterPR$species = "hamsterPR"


seurat = merge(human[intersectgenes, ], hamsterMA[intersectgenes, ], merge.data = TRUE)
seurat = merge(seurat, hamsterPR[intersectgenes, ])
seurat

rm(hamsterMA, hamsterPR ,human)
gc()

```


```{r}
getOption("Seurat.object.assay.version")
options(Seurat.object.assay.version = "v5")
getOption("Seurat.object.assay.version")

# convert a v3 assay to a v5 assay
seurat[["RNA"]] <- as(object = seurat[["RNA"]], Class = "Assay5")

```

We will aim to integrate the different batches together. In previous versions of Seurat, we would require the data to be represented as nine different Seurat objects. When using Seurat v5 assays, we can instead keep all the data in one object, but simply split the layers.
After splitting, there are now 18 layers (a `counts` and `data` layer for each batch). We can also run a standard scRNA-seq analysis (i.e. without integration). Note that since the data is split into layers, normalization and variable feature identification is performed for each batch independently (a consensus set of variable features is automatically identified).



```{r splitassay}
seurat[["RNA"]] <- split(seurat[["RNA"]], f = seurat$run10x)
seurat
seurat <- NormalizeData(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat)
seurat <- RunPCA(seurat)
```
We can now visualize the results of a standard analysis without integration. Note that cells are grouping both by cell type and by underlying method. While a UMAP analysis is just a visualization of this, clustering this dataset would return predominantly batch-specific clusters. Especially if previous cell-type annotations were not available, this would make downstream analysis extremely challenging.  
```{r unintegratedUMAP, fig.height=5, fig.width=14}
seurat <- FindNeighbors(seurat, dims=1:30, reduction = 'pca')
seurat <- FindClusters(seurat, resolution = 2, cluster.name = "unintegrated_clusters")
seurat <- RunUMAP(seurat, dims = 1:30, reduction = 'pca', reduction.name = 'umap.unintegrated')
# visualize by batch and cell type annotation
# cell type annotations were previously added by Azimuth
DimPlot(seurat, reduction = 'umap.unintegrated', group.by=c('run10x','predicted.celltype.l2'),raster=FALSE)

p0 <- DimPlot(
  seurat, reduction = "umap.unintegrated",
  group.by = c("run10x", "uniform_name_overview", "unintegrated_clusters", "species"),
  combine = TRUE, 
  raster= FALSE, 
  label = T) & NoLegend()

p0
```


```{r}
jpeg2(here("R/Results/h224_3_seurat_unintegrated.jpeg"), 24, 18)
plot(p0)
dev.off()

```
 


# Perform streamlined (one-line) integrative analysis

Seurat v5 enables streamlined integrative analysis using the `IntegrateLayers` function. The method currently supports five integration methods. Each of these methods performs integration in low-dimensional space, and returns a dimensional reduction (i.e. `integrated.rpca`) that aims to co-embed shared cell types across batches:

* Anchor-based CCA integration (`method=CCAIntegration`)
* Anchor-based RPCA integration (`method=RPCAIntegration`)
* Harmony (`method=HarmonyIntegration`)
* FastMNN (`method= FastMNNIntegration`)
* scVI (`method=scVIIntegration`)

Note that you can find more detail on each method, and any installation prerequisites, in Seurat's documentation (for example, `?scVIIntegration`). For example, scVI integration requires `reticulate` which can be installed from CRAN (`install.packages("reticulate")`) as well as `scvi-tools` and its dependencies installed in a conda environment. Please see scVI installation instructions [here](https://docs.scvi-tools.org/en/stable/installation.html).

Each of the following lines perform a new integration using a single line of code:

```{r integratelayersharmony}
seurat <- IntegrateLayers(
  object = seurat, method = HarmonyIntegration,
  orig.reduction = "pca", new.reduction = 'harmony',
  verbose = FALSE)
```
Here at harmony there were occassionally warnings __Anzahl Schritte in der Quick-TRANSfer Stufe überschreitet Maximum (= 7403900)__ which relates to the performance of the-k-means algorithm, see also https://github.com/immunogenomics/harmony/issues/25 and https://stackoverflow.com/questions/21382681/kmeans-quick-transfer-stage-steps-exceeded-maximum



```{r integratelayersrpca}
seurat <- IntegrateLayers(
  object = seurat, method = RPCAIntegration,
  orig.reduction = "pca", new.reduction = 'integrated.rpca',
  verbose = FALSE)
```


For any of the methods, we can now visualize and cluster the datasets. We show this for CCA integration and scVI, but you can do this for any method

```{r  fig.height=8, fig.width=18}
seurat <- FindNeighbors(seurat, reduction = 'harmony', dims = 1:30)
seurat <- FindClusters(seurat,resolution = 2, cluster.name = 'harmony_clusters')
seurat <- RunUMAP(seurat, reduction = "harmony", dims = 1:30, reduction.name = 'umap.harmony')
p1 <- DimPlot(
  seurat, reduction = "umap.harmony",
  group.by = c("run10x", "uniform_name_overview", "harmony_clusters", "species"),
  combine = TRUE, 
  raster= FALSE, 
  label = T) & NoLegend()

p1
```

```{r}
jpeg2(here("R/Results/h224_3_seurat_integrated_harmony.jpeg"), 24, 18)
plot(p1)
dev.off()
```

```{r  fig.height=8, fig.width=18}
seurat <- FindNeighbors(seurat, reduction = 'integrated.rpca', dims = 1:30)
seurat <- FindClusters(seurat,resolution = 2, cluster.name = 'rpca_clusters')
seurat <- RunUMAP(seurat, reduction = "integrated.rpca", dims = 1:30, reduction.name = 'umap.rpca')
p2 <- DimPlot(
  seurat, reduction = "umap.rpca",
  group.by = c("run10x", "uniform_name_overview", "rpca_clusters", "species"),
  combine = TRUE, 
  raster= FALSE, 
  label = T) & NoLegend()
p2

```
```{r}


jpeg2(here("R/Results/h224_3_seurat_integrated_rpca.jpeg"), 24, 18)
plot(p2)
dev.off()


```

```{r integratelayersfastmnn}
seurat <- IntegrateLayers(
  object = seurat, method = FastMNNIntegration,
  new.reduction = 'integrated.mnn',
  verbose = FALSE)

seurat <- FindNeighbors(seurat, reduction = 'integrated.mnn', dims = 1:30)
seurat <- FindClusters(seurat,resolution = 2, cluster.name = 'FastMNN_clusters')
seurat <- RunUMAP(seurat, reduction = "integrated.mnn", dims = 1:30, reduction.name = 'umap.FastMNN')
p3 <- DimPlot(
  seurat, reduction = "umap.FastMNN",
  group.by = c("run10x", "uniform_name_overview", "FastMNN_clusters", "species"),
  combine = TRUE, 
  raster= FALSE, 
  label = T) & NoLegend()

p3


```

```{r}
jpeg2(here("R/Results/h224_3_seurat_integrated_fastMNN.jpeg"), 24, 18)
plot(p3)
dev.off()

```




Once integrative analysis is complete, you can rejoin the layers - which collapses the individual datasets together and recreates the original `counts` and `data` layers. You will need to do this before performing any differential expression analysis. However, you can always resplit the layers in case you would like to reperform integrative analysis.

```{r joinlayers}
seurat <- JoinLayers(seurat)
seurat
```

```{r}
saveRDS(seurat, here("R/results/h224_3_seurat_integrated_harmony_rpca_fastMNN_layersjoined.rds"))
```

```{r}
finalizeSkript()
```
