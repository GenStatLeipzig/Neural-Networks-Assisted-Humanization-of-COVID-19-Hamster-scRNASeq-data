---
title: "h219_3_additional_doubletten_check_hamsterRB.qmd"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# >INITITATE

```{r}

#' # INITIIEREN #### 
.libPaths("~/rpackages/angmar/")
.libPaths()

library(Seurat)
library(SeuratWrappers)
library(toolboxH)
library(here)
library(ggplot2)
library(ggthemes)
library(scales)
library(sva)
library(BiocParallel)
library(scDblFinder)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 20*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 20 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)



doSCTransform = function(seuratobject, experimentIDcol = "run10x", variable.features.n = 4000, ...) {
  # seuratobject = mouse;experimentIDcol = "run10x"

  message(Sys.time(), "...Running Seurat SCT separately on following cells:")
  mytable(seuratobject[[experimentIDcol]])

  n_experiments = uniqueN(names(table(seuratobject[[experimentIDcol]])))

  if(n_experiments ==1) seuratobject_list = list(seuratobject) else seuratobject_list <- SplitObject(object = seuratobject, split.by = experimentIDcol)
  seuratobject_list


  for (i in 1:length(seuratobject_list)) {
    # i=1
    message(Sys.time(), "...SCT on ", i, "\n-------------------------------------------------------")
    seuratobject_list[[i]] <- SCTransform(seuratobject_list[[i]], verbose = T,variable.features.n = variable.features.n, ... ) # TODO include "G2M.Score", "S.Score" regression if necessary
  }
  print(table(names(warnings() ))) #
  message(Sys.time(), '...Notes about warning:\n"iteration limit reached"\nChristophH commented on 22 May 2019 - These warnings are showing that there are some genes for which it is hard to reliably estimate theta (presumably because of very few non-zero observations). Usually we donÂ´t worry about these warnings too much, since we regularize the parameters in a later step, thus averaging out uncertainty of individual gene parameters. https://github.com/ChristophH/sctransform/issues/25')


  list.features <- SelectIntegrationFeatures(object.list = seuratobject_list, nfeatures = 4000)

  if(length(seuratobject_list)>1) {
    seuratobject <- merge(seuratobject_list[[1]],
                          y = seuratobject_list[2:length(seuratobject_list)],
                          # project = "seuratobject",
                          merge.data = TRUE)

  } else seuratobject = seuratobject_list[[1]]

  VariableFeatures(seuratobject) <- list.features
  seuratobject
}

plot3clusterings = function(seuratobject, clustervar1 = 'SCT_snn_res.0.2', clustervar2 = 'SCT_snn_res.0.4', clustervar3 = 'SCT_snn_res.0.8') {
  # clustervar1 = 'SCT_snn_res.0.2'; clustervar2 = 'SCT_snn_res.0.4'; clustervar3 = 'SCT_snn_res.0.8'
  seuratobject_name = deparse(substitute(seuratobject))
  p1 = DimPlot(seuratobject, group.by = clustervar1, label = T)
  p2 = DimPlot(seuratobject, group.by = clustervar2, label = T)
  p3 = DimPlot(seuratobject, group.by = clustervar3, label = T)

  plot(p1+p2+p3 + patchwork::plot_annotation(title = seuratobject_name))
}


calcDoubletts <- function(seuratobject,
                          doSCT = T,  # was the seurat object preprocessed with SCT, see # maximal number of Pcs, see https://github.com/chris-mcginnis-ucsf/DoubletFinder
                          maxPC = 10, # maximal number of Pcs, see https://github.com/chris-mcginnis-ucsf/DoubletFinder
                          annotation_column = "SCT_snn_res.0.4" , # Clusternames

                          doublets_expected_fromLoading = NULL, # /CG000183_ChromiumSingleCell3__v3_UG_Rev_C.pdf
                          seed = 2712, # seed for reproduction
                          experimental_batchID = "run10x",
                          numberOfCores=1 ,# six is good, as there are six runs to explore parameter space
                          estimated_loading_doublets = estimated_loading_doublets # provide doublets, as the seuratobject is already filtered not including all cells anymore, typically # typically see  https://assets.ctfassets.net/an68im79xiti/4tjk4KvXzTWgTs8f3tvUjq/2259891d68c53693e753e1b45e42de2d
) {

  seuratobject_name = deparse(substitute(seuratobject))
  library(DoubletFinder) # remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')

  set.seed(seed)
  stopifnot(experimental_batchID %in% names(seuratobject@meta.data))
  message(Sys.time(), "...expecting '",experimental_batchID,"' as sub-experiment-identifyer...")
  mytable(seuratobject@meta.data[[experimental_batchID]])


  stopifnot("Not all Columns named 'run10x', 'estimated_doublettrate_proz'  found in  in parameter table 'estimated_loading_doublets'"=all(c('run10x', "estimated_doublettrate_proz") %in% names(estimated_loading_doublets)))


  stopifnot(annotation_column %in% names(seuratobject@meta.data))
  message(Sys.time(), "...using column '",annotation_column,"' for clustering...")
  orig.idents = unique(seuratobject@meta.data[[experimental_batchID]])
  message(paste0(Sys.time(), "...Running DoubletFinder for\n", paste(orig.idents, collapse = "\n")))

  stopifnot("not all sub-experiments found in parameter table 'estimated_loading_doublets'"= all(orig.idents %in% estimated_loading_doublets$run10x))
  # separate for each

  if("pANN" %in% names(seuratobject@meta.data)) seuratobject$pANN = NULL

  totalres = lapply(orig.idents, function(myident) {

    # myident = orig.idents[1]
    # myident = "Aorta 2 S1"
    # myident = "Lung 7 S4"
    res = c()
    message(Sys.time(), "...=======================================================\nWorking on ", myident)

    subseurat  = seuratobject[,seuratobject@meta.data[[experimental_batchID]]== myident]
    subseurat


    # https://github.com/chris-mcginnis-ucsf/DoubletFinder

    ## pK Identification (no ground-truth) ---------------------------------------------------------------------------------------
    sweep.res.list_subseurat <- paramSweep_v3(subseurat, PCs = 1:maxPC, sct = doSCT,num.cores	=numberOfCores)
    sweep.stats_subseurat <- summarizeSweep(sweep.res.list_subseurat, GT = FALSE)
    bcmvn_subseurat <- find.pK(sweep.stats_subseurat)
    bcmvn_subseurat
    # plot(bcmvn_subseurat)
    mypk = bcmvn_subseurat[bcmvn_subseurat$BCmetric==max(bcmvn_subseurat$BCmetric), "pK"] %>% as.character %>% as.numeric
    mypk
    message("Using pk of ",mypk)
    res$bcmvn = bcmvn_subseurat
    res$pk =mypk

    annotations <- subseurat@meta.data[,annotation_column]
    homotypic.prop <- modelHomotypic(annotations)           ## ex: annotations <- subseurat@meta.data$ClusteringResults
    message("Using homotypic.prop of ",homotypic.prop)
    homotypic.prop


    estimated_doublettrate = estimated_loading_doublets[run10x==myident, estimated_doublettrate_proz]
    cellspresent = estimated_loading_doublets[run10x==myident, N]
    message(Sys.time(), "...using provided Doublett rate  providedtable in  parameter  'estimated_loading_doublets' from number of present cells per batch ", "(",cellspresent, " -> ca. ", round(estimated_doublettrate, 1), "%)")
    doublettrate = estimated_doublettrate /100


    nExp_poi <- round(doublettrate*nrow(subseurat@meta.data))

    nExp_poi
    nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))
    nExp_poi.adj

    res$nExp_poi = nExp_poi
    res$nExp_poi.adj = nExp_poi.adj

    message(Sys.time(), "...Running DoubletFinder with varying classification stringencies ----------------------------------------------------------------")

    subseurat1 <- doubletFinder_v3(subseurat, PCs = 1:maxPC, pN = 0.25, pK = mypk, nExp = nExp_poi, reuse.pANN = FALSE, sct = doSCT)
    # pann_name = grep("^pANN", names(subseurat@meta.data), value = T)
    pann_name = grep("^pANN", names(subseurat1@meta.data), value = T)
    pann_name
    res$pann_name = pann_name
 
    subseurat2 <- doubletFinder_v3(subseurat1, PCs = 1:maxPC, pN = 0.25, pK = mypk, nExp = nExp_poi.adj, reuse.pANN = pann_name, sct = doSCT)
 
    subseurat_attrib = subseurat1@meta.data %>% as.data.table(.,keep.rownames = T)
    subseurat_attrib2 = subseurat2@meta.data %>% as.data.table(.,keep.rownames = T)
 
    DF_finalnames1 = grep("DF\\.classific", names(subseurat1@meta.data), value = T) %>% last()
    DF_finalnames1
    DF_finalnames2 = grep("DF\\.classific", names(subseurat2@meta.data), value = T) %>% last()
    DF_finalnames2

    
    subseurat_attrib[, DF.classifications_notConsidHomoDoubl := subseurat_attrib[match_hk(subseurat_attrib$rn, subseurat_attrib$rn), get(DF_finalnames1)]]
    subseurat_attrib[, DF.classifications_ConsidHomoDoubl := subseurat_attrib2[match_hk(subseurat_attrib$rn, subseurat_attrib2$rn), get(DF_finalnames2)]]


    subseurat_attrib[,.N, .(DF.classifications_notConsidHomoDoubl, DF.classifications_ConsidHomoDoubl)]
    subseurat_attrib[DF.classifications_notConsidHomoDoubl != DF.classifications_ConsidHomoDoubl,.N , get(annotation_column)]

    annodata_pre =  subseurat_attrib[,.N, .(get(annotation_column),DF.classifications_ConsidHomoDoubl)]
    names(annodata_pre)[names(annodata_pre)=="get"] = annotation_column
    annodata  = dcast.data.table(annodata_pre, get(annotation_column) ~ DF.classifications_ConsidHomoDoubl, value.var = "N", fill = 0)
    names(annodata)[names(annodata)=="annotation_column"] = annotation_column
    annodata[,proz_doublet := paste0((Doublet/(Doublet + Singlet)) %>% proz(.,stellen = 0), "\n(",Doublet, ")")]
    annodata2 = cbind(DF.classifications_ConsidHomoDoubl = "Doublet", annodata)

    p_bar = ggplot(subseurat_attrib, aes_string(x = annotation_column, fill = 'DF.classifications_ConsidHomoDoubl')) +
      geom_bar(position = "fill", alpha = 0.8) + scale_y_continuous(labels = label_percent(accuracy = 1), breaks = (0:10)/10) + theme_hc() +
      theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust = 1),
            legend.position = "top",
            axis.title.x = element_blank(),
            axis.title.y = element_blank(),
      ) +
      scale_fill_colorblind()+
      labs(fill = "")+
      geom_text(data =annodata2, aes_string(x = annotation_column, label = 'proz_doublet', y = 1.1), col = viridis_pal()(1), size =3) +
      ggtitle(paste(seuratobject_name , "-", myident), subtitle = 'DF.classifications_ConsidHomoDoubl')

    plot(p_bar)

    res$p_barplot = p_bar
    res$annotation= subseurat_attrib
    message(Sys.time(), "...DONE Doublet analysis for ", myident, "===================================================================================================================================================================================================================")
    res


  }
  )
  message(Sys.time(), "...Collecting Doublet results back into seurat object... ")
  names(totalres) = orig.idents 

  doubletdf = lapply(totalres, function(x) {
 
    setnames(x$annotation, grep("pANN", names(x$annotation), value = T), "pANN")
  }) %>% rbindlist(., fill = T) %>% .[,grep('DF\\.classifications_0', names(.), invert = T), with = F]

  doubletdf

  seuratobject$pANN = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),pANN]
  seuratobject$DF.classifications_notConsidHomoDoubl = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),DF.classifications_notConsidHomoDoubl]
  seuratobject$DF.classifications_ConsidHomoDoubl = doubletdf[toolboxH::match_hk(colnames(seuratobject), doubletdf$rn),DF.classifications_ConsidHomoDoubl]



  plot(DimPlot(seuratobject, group.by = 'DF.classifications_ConsidHomoDoubl', raster = F))

  seuratobject

}
```

# >AIM

Identify doubletts with additional software

# hamsterMA
## LOAD

```{r load}
# if(exists('seurat')==F) 
seurat = readRDS(here("R/results/h213_2_hamsterPR_decontx_dblt.RDS"))
orthologues = fread( here("R/results/h216_2_gene_annotation_Phodopus_roborovskii.txt.gz"))
orthologues[,.N, human_orthologue_by]
orthologues2 = orthologues[human_orthologue_by != "03:same name uppercase in human" & seurat_name %in% rownames(seurat)]
orthologues2[,.N, human_orthologue_by]

```

## Doublets via DoubletFinder
### Define cellcycle and mito genes
```{r}

mitogenes_seurat = orthologues2[grep('^MT-', human_orthologue_name), seurat_name] %>% na.omit() %>% intersect(rownames(seurat), .)
mitogenes_seurat



s.genes <- orthologues2[human_orthologue_name %in% cc.genes$s.genes , seurat_name] %>% na.omit() %>% intersect(rownames(seurat), .)
s.genes %>% sort()

g2m.genes <- orthologues2[human_orthologue_name %in% cc.genes$g2m.genes, seurat_name] %>% na.omit() %>% intersect(rownames(seurat), .)
g2m.genes %>% sort()


seurat$percent.mito <- PercentageFeatureSet(seurat,features = mitogenes_seurat)
hist(seurat$percent.mito, breaks = 50)
```

### Cluster
```{r}
seurat$run10x %>% table()
seurat2 <- seurat %>% 
  doSCTransform(seuratobject = .,experimentIDcol = "run10x", variable.features.n = 4000,    method = "glmGamPoi", vst.flavor = "v2",) %>%
  CellCycleScoring(s.features = s.genes, g2m.features = g2m.genes,  assay = "SCT")   %>%
  RunPCA(features=VariableFeatures(.), assay = "SCT", npcs = 50,verbose=TRUE)%>%
  RunUMAP(dims=1:30,verbose=TRUE,  assay = "SCT" ) %>%
  FindNeighbors(dims=1:30, assay = "SCT", verbose=TRUE)  %>%
  FindClusters( resolution = 0.8) %>%
  FindClusters( resolution = 0.2) %>%
  FindClusters( resolution = 0.4)
seurat2
```

### plot Cluster
```{r}
plot3clusterings(seurat2)
```

### estimatin doublets from loading
guessing from Loading TODO Ask peter

```{r}
annocells = as.data.table(seurat2@meta.data)
  
  estimated_loading_doublets = annocells[,.(N=.N), run10x][order(run10x)]

    estimated_loading_doublets[, estimated_doublettrate_proz  := 0.0007665152*N*1.2] # TODO Peter, was war das loading? ertmal 1.2x hoher angenommen
  estimated_loading_doublets$reference = "For 10x data, should reflect loading acc. to https://assets.ctfassets.net/an68im79xiti/4tjk4KvXzTWgTs8f3tvUjq/2259891d68c53693e753e1b45e42de2d/CG000183_ChromiumSingleCell3__v3_UG_Rev_C.pdf"
  # 

  WriteXLS_hk('estimated_loading_doublets', here("R/results/h219_3_hamsterPR_estimated_loading_doublets.xlsx"))
  
  estimated_loading_doublets
  
```


### Calc DoubletFinder
```{r}
seurat3 =   calcDoubletts(seuratobject = seurat2,
                                     doSCT=T, # allthough objectwas already sctransformed, FALSE seem not to work
                                     annotation_column = "SCT_snn_res.0.4", # reasonable number of cluster, should roughly match number of cell types
                                     numberOfCores = 8,#  paramter space
                                     estimated_loading_doublets = estimated_loading_doublets # provide doublets, as the seuratobject is already filtered not including all cells anymore
) 


```

## plot doublets
```{r}
DimPlot(seurat3, group.by = 'DF.classifications_ConsidHomoDoubl')
```



# SAVE

```{r saving}
cellanno = seurat3@meta.data %>% as.data.table(keep.rownames = T)
cellanno
fwrite(cellanno, file = here("R/results/h219_3_hamsterPR_DoubletFinder.txt.gz"))
saveRDS(seurat3, file = here("R/results/h219_3_hamsterPR_DoubletFinder.rds"))
```



# finalize

```{r}
finalizeSkript()

```
