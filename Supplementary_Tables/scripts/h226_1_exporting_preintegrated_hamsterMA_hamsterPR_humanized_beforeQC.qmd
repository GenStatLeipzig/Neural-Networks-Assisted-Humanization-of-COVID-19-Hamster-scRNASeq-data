---
title: "h226_1_exporting_preintegrated_hamsterMA_hamsterPR_humanized_beforeQC"
format:
  html:
    df-print: paged
    fig-width: 13
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

# INITITATE

```{r results='hide', message=FALSE}

#' # INITIIEREN ####
set.seed(192)
.libPaths()

all_times <- list()  # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      now <<- Sys.time()
    } else {
      res <- difftime(Sys.time(), now, units = "secs")
      all_times[[options$label]] <<- res
    }
  }
}))
knitr::opts_chunk$set(
  tidy = 'styler',
  fig.width = 10,
  message = FALSE,
  warning = FALSE,
  time_it = TRUE,
  error = TRUE
)

library(toolboxH)
library(Seurat)
library(SeuratWrappers)
library(here)
library(ggplot2)
library(sva)
library(patchwork)
library(BiocParallel)
library(scDblFinder)
library(pander)
  require(ggsankey)
  require(ggrepel)

  require(dplyr)
library(future) #https://satijalab.org/celllines/archive/v3.0/future_vignette.html
options(future.globals.maxSize= 10*1024^3) # to prevent the error
future.seed=TRUE # to care for proper random seeds
ncores = 10 # in R conselo, 1, only mclapply is compatible with RSTUDIO
plan("multicore", workers = ncores)

RNGkind("L'Ecuyer-CMRG") # make random number working for mclapply https://bookdown.org/rdpeng/rprogdatascience/parallel-computation.html#the-parallel-package
set.seed(192)

knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# Dataimport

```{r}
# load hamster MA ----
if(all(c('hamsterMA', 'hamsterMA', 'human') %in% ls())==F) {
hamsterMA = readRDS(here("R/results/h221_5_qc_hamsterMA_singlestudy.rds"))
hamsterMA 

hamsterPR = readRDS(here("R/results/h222_2_qc_hamsterPR_singlestudy.rds"))
hamsterPR

human = readRDS(here("R/results/h220_5_qc_human_singlestudy.rds"))
human
}
```



# unifying gene names
```{r results='hide', fig.show='hide'}

orthologues_MA = fread(here("R/results/h217_2_orthologues_measaur_used.txt.gz"), na.strings = c("NA", ""))
# showNA(orthologues_MA, showAllNoNA = F)
orthologues_MA2 = orthologues_MA[is.na(human_orthologue_name)==F & seurat_name %in% rownames(hamsterMA)]
orthologues_MA2[,.N, human_orthologue_by]
 qlist1 = venn3(rownames(hamsterMA), orthologues_MA$seurat_name, orthologues_MA2$seurat_name)
orthologues_MA2_orthopur = orthologues_MA2[human_orthologue_by !=  "04:same name uppercase in human"]
orthologues_MA2_orthopur[,.N, human_orthologue_by]
 

orthologues_PR = fread(here("R/results/h216_2_gene_annotation_Phodopus_roborovskii.txt.gz"), na.strings = c("NA", ""))
orthologues_PR2 = orthologues_PR[is.na(human_orthologue_name)==F & seurat_name %in% rownames(hamsterPR)]
orthologues_PR2[,.N, human_orthologue_by]

qlist2 = venn3(rownames(hamsterPR), orthologues_PR$seurat_name,orthologues_PR2$seurat_name)

orthologues_PR2_orthopur = orthologues_PR2[human_orthologue_by !=  "03:same name uppercase in human"]
orthologues_PR2_orthopur[,.N, human_orthologue_by]


```




```{r}
# prioritize for duplicated genes higher expressed gene ----
av_express_human = AverageExpression(human,assays = "SCT", slot = "count")
hh(av_express_human$SCT)


av_express_human_dt = data.table(name_human = rownames(av_express_human$SCT),
                                        max_in_human = apply(av_express_human$SCT, 1, max))

orthologues[, max_in_human := av_express_human_dt[match_hk(orthologues$name_human, av_express_human_dt$name_human),max_in_human]]


# creating table for renaming gene names ----
# require(Seurat.utils) #  # from https://github.com/vertesy/Seurat.utils install via devtools::install_github("vertesy/Seurat.utils") or source directly
RenameGenesSeurat <- function(seurat , renamingtable) { # Replace gene names in different slots of a Seurat object. Run this before integration. Run this before integration. It only changes seurat@assays$RNA@counts, @data and @scale.data.
  
  # renamingtable = orthologues_MA2[,.(oldname = seurat_name, newname = human_orthologue_name)]
  message("Run this before integration. It only changes seurat@assays$RNA@counts, @data and @scale.data.")
  
  testthat::test_that("oldname and newname are namenames of renamingtable", expect_true( all(c("oldname", "newname") %in% names(renamingtable))))
  
  RNA <- seurat@assays$RNA
  
  genenametable = data.table(oldname = rownames(RNA))
  genenametable[, newname := renamingtable[match_hk(genenametable$oldname, renamingtable$oldname, makeunique = T, importcol = renamingtable$newname), newname]]
  genenametable[is.na(newname), newname :=oldname]
  
  duplicheck = genenametable[allDuplicatedEntries(newname)]
  if(nrow(duplicheck)>0) {
    print(duplicheck)
    stop("duplicates found after trying to rename")
  }
  
  newnames = genenametable$newname
  
  if (nrow(RNA) == length(newnames)) {
    if (length(RNA@counts)) RNA@counts@Dimnames[[1]]            <- newnames
    if (length(RNA@data)) RNA@data@Dimnames[[1]]                <- newnames
    if (length(RNA@scale.data)) RNA@scale.data@Dimnames[[1]]    <- newnames
    # if (length(seurat@meta.data)) rownames(seurat@meta.data)          <- newnames
  } else {"Unequal gene sets: nrow(RNA) != nrow(newnames)"}
  seurat@assays$RNA <- RNA
  return(seurat)
}


hamsterMA2 = RenameGenesSeurat(seurat = hamsterMA, renamingtable = orthologues_MA[,.(oldname = seurat_name, newname = human_orthologue_name)])
hamsterMA2@active.assay = "RNA"

hamsterPR2 = RenameGenesSeurat(seurat = hamsterPR, renamingtable = orthologues_PR[,.(oldname = seurat_name, newname = human_orthologue_name)])
hamsterPR2@active.assay = "RNA"

```



# creating a single object

```{r}
# remove nonRNA assays
hamsterMA = DietSeurat(hamsterMA2, layers =  c("counts", "data") , assays = "RNA")
hamsterMA

hamsterPR = DietSeurat(hamsterPR2, layers =  c("counts", "data") , assays = "RNA")
hamsterPR

DefaultAssay(human) = "RNA"
human= DietSeurat(human, layers =  c("counts", "data") , assays = "RNA")
human


rm(hamsterMA2, hamsterPR2)
gc()
qlist55 = venn3(rownames(human), 
                rownames(hamsterMA), 
                rownames(hamsterPR)
                )

human$species = "human"
hamsterMA$species = "hamsterMA"
hamsterPR$species = "hamsterPR"
```

# saving hamsters
```{r}
saveRDS(hamsterMA, here("R/results/h226_1_seurat_hamsterMA_humanNames.rds"))
saveRDS(hamsterPR, here("R/results/h226_1_seurat_hamsterPR_humanNames.rds"))

```

```{r}
finalizeSkript()
```
R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

Random number generation:
 RNG:     L'Ecuyer-CMRG 
 Normal:  Inversion 
 Sample:  Rejection 
 
locale:
[1] LC_COLLATE=German_Germany.utf8  LC_CTYPE=German_Germany.utf8   
[3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.utf8    

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] UpSetR_1.4.0                future_1.32.0              
 [3] dplyr_1.1.1                 ggrepel_0.9.3              
 [5] ggsankey_0.0.99999          pander_0.6.5               
 [7] scDblFinder_1.12.0          SingleCellExperiment_1.20.0
 [9] SummarizedExperiment_1.28.0 Biobase_2.58.0             
[11] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9        
[13] IRanges_2.32.0              S4Vectors_0.36.1           
[15] BiocGenerics_0.44.0         MatrixGenerics_1.10.0      
[17] matrixStats_0.63.0          patchwork_1.1.2            
[19] sva_3.46.0                  BiocParallel_1.32.5        
[21] genefilter_1.80.3           mgcv_1.8-42                
[23] nlme_3.1-161                ggplot2_3.4.2              
[25] here_1.0.1                  SeuratWrappers_0.3.19      
[27] Seurat_4.9.9.9044           SeuratObject_4.9.9.9084    
[29] sp_1.6-0                    toolboxH_0.2.17            
[31] eulerr_7.0.0                testthat_3.1.7             
[33] stringr_1.5.0               scales_1.2.1               
[35] readxl_1.4.2                RColorBrewer_1.1-3         
[37] png_0.1-8                   fdrtool_1.2.17             
[39] R.utils_2.12.2              R.oo_1.25.0                
[41] R.methodsS3_1.8.2           data.table_1.14.8          

loaded via a namespace (and not attached):
  [1] rtracklayer_1.58.0        scattermore_1.0          
  [3] tidyr_1.3.0               bit64_4.0.5              
  [5] knitr_1.42                irlba_2.3.5.1            
  [7] DelayedArray_0.24.0       styler_1.9.1             
  [9] KEGGREST_1.38.0           RCurl_1.98-1.9           
 [11] generics_0.1.3            ScaledMatrix_1.6.0       
 [13] cowplot_1.1.1             RSQLite_2.2.20           
 [15] RANN_2.6.1                bit_4.0.5                
 [17] spatstat.data_3.0-1       httpuv_1.6.9             
 [19] viridis_0.6.2             xfun_0.38                
 [21] evaluate_0.20             promises_1.2.0.1         
 [23] fansi_1.0.4               restfulr_0.0.15          
 [25] igraph_1.4.1              DBI_1.1.3                
 [27] htmlwidgets_1.6.2         spatstat.geom_3.1-0      
 [29] purrr_1.0.1               ellipsis_0.3.2           
 [31] RSpectra_0.16-1           annotate_1.76.0          
 [33] deldir_1.0-6              sparseMatrixStats_1.10.0 
 [35] vctrs_0.6.1               remotes_2.4.2            
 [37] ROCR_1.0-11               abind_1.4-5              
 [39] cachem_1.0.7              withr_2.5.0              
 [41] progressr_0.13.0          sctransform_0.3.5        
 [43] GenomicAlignments_1.34.0  scran_1.26.2             
 [45] goftest_1.2-3             cluster_2.1.4            
 [47] dotCall64_1.0-2           lazyeval_0.2.2           
 [49] crayon_1.5.2              spatstat.explore_3.1-0   
 [51] labeling_0.4.2            edgeR_3.40.2             
 [53] pkgconfig_2.0.3           pkgload_1.3.2            
 [55] vipor_0.4.5               rlang_1.1.0              
 [57] globals_0.16.2            lifecycle_1.0.3          
 [59] miniUI_0.1.1.1            fastDummies_1.6.3        
 [61] rsvd_1.0.5                cellranger_1.1.0         
 [63] rprojroot_2.0.3           polyclip_1.10-4          
 [65] RcppHNSW_0.4.1            lmtest_0.9-40            
 [67] Matrix_1.5-3              zoo_1.8-11               
 [69] beeswarm_0.4.0            ggridges_0.5.4           
 [71] viridisLite_0.4.2         rjson_0.2.21             
 [73] bitops_1.0-7              KernSmooth_2.23-20       
 [75] spam_2.9-1                Biostrings_2.66.0        
 [77] blob_1.2.3                DelayedMatrixStats_1.20.0
 [79] parallelly_1.35.0         spatstat.random_3.1-4    
 [81] R.cache_0.16.0            beachmat_2.14.0          
 [83] memoise_2.0.1             magrittr_2.0.3           
 [85] plyr_1.8.8                ica_1.0-3                
 [87] zlibbioc_1.44.0           compiler_4.2.3           
 [89] dqrng_0.3.0               BiocIO_1.8.0             
 [91] fitdistrplus_1.1-8        Rsamtools_2.14.0         
 [93] cli_3.6.1                 XVector_0.38.0           
 [95] listenv_0.9.0             pbapply_1.7-0            
 [97] MASS_7.3-58.2             tidyselect_1.2.0         
 [99] stringi_1.7.12            yaml_2.3.7               
[101] BiocSingular_1.14.0       locfit_1.5-9.7           
[103] grid_4.2.3                tools_4.2.3              
[105] future.apply_1.10.0       parallel_4.2.3           
[107] rstudioapi_0.14           bluster_1.8.0            
[109] metapod_1.6.0             gridExtra_2.3            
[111] farver_2.1.1              Rtsne_0.16               
[113] digest_0.6.31             BiocManager_1.30.20      
[115] shiny_1.7.4               Rcpp_1.0.10              
[117] scuttle_1.8.4             later_1.3.0              
[119] RcppAnnoy_0.0.20          httr_1.4.5               
[121] AnnotationDbi_1.60.0      colorspace_2.1-0         
[123] brio_1.1.3                XML_3.99-0.13            
[125] tensor_1.5                reticulate_1.28          
[127] splines_4.2.3             uwot_0.1.14              
[129] statmod_1.5.0             spatstat.utils_3.0-2     
[131] scater_1.26.1             xgboost_1.7.5.1          
[133] plotly_4.10.1             xtable_1.8-4             
[135] jsonlite_1.8.4            R6_2.5.1                 
[137] pillar_1.9.0              htmltools_0.5.5          
[139] mime_0.12                 glue_1.6.2               
[141] fastmap_1.1.1             BiocNeighbors_1.16.0     
[143] codetools_0.2-19          utf8_1.2.3               
[145] lattice_0.20-45           spatstat.sparse_3.0-1    
[147] tibble_3.2.1              ggbeeswarm_0.7.1         
[149] leiden_0.4.3              waldo_0.5.0              
[151] survival_3.5-0            limma_3.54.0             
[153] rmarkdown_2.21            desc_1.4.2               
[155] munsell_0.5.0             GenomeInfoDbData_1.2.9   
[157] reshape2_1.4.4            gtable_0.3.3  
